$ oscasp -s0 ../axioms/bec_scasp.pl ./model-fixed-holdsAt4.pl --tree


% QUERY:?- happens(switch_fade_in,T).

	ANSWER:	1 (in 11.694 ms)

JUSTIFICATION_TREE:
happens(switch_fade_in,30) :-
    epsilon(10),
    holdsAt(brightness(0),30,fading_out,10) :-
        max_time(45),
        can_trajectory(fading_out,20,brightness(0),30),
        can_initiates(switch_fade_out,fading_out,20),
        happens(switch_fade_out,20) :-
            epsilon(10),
            holdsAt(brightness(10),20,fading_in,10) :-
                max_time(45),
                can_trajectory(fading_in,10,brightness(10),20),
                can_initiates(turn_light_on,fading_in,10),
                happens(turn_light_on,10),
                initiates(turn_light_on,fading_in,10),
                trajectory(fading_in,10,brightness(10),20) :-
                    holdsAt(brightness(0),10) :-
                        max_time(45),
                        initiallyP(brightness(0)),
                        not_stoppedIn(0,brightness(0),10) :-
                            not_interrupted(terminates,brightness(0),0,10) :-
                                findall(Var4,findall_can_interrupts(terminates,Var4,brightness(0),0,10),[]),
                                not_interrupted_(terminates,brightness(0),[],0,10).
                            not_interrupted(releases,brightness(0),0,10) :-
                                findall(Var5,findall_can_interrupts(releases,Var5,brightness(0),0,10),[turn_light_on]) :-
                                    findall_can_interrupts(releases,turn_light_on,brightness(0),0,10) :-
                                        can_interrupts(releases,turn_light_on,brightness(0),Var1 | {Var1 #> 0,Var1 #< 10}) :-
                                            can_releases(turn_light_on,brightness(0),Var1 | {Var1 #> 0,Var1 #< 10}).
                                not_interrupted_(releases,brightness(0),[turn_light_on],0,10) :-
                                    findall(Var6,interrupted(releases,turn_light_on,brightness(0),Var6,0,10),[]),
                                    all_entirely_outside_of_interval([],0,10),
                                    not_interrupted_(releases,brightness(0),[],0,10).
                not_stoppedIn(10,fading_in,20) :-
                    not_interrupted(terminates,fading_in,10,20) :-
                        findall(Var7,findall_can_interrupts(terminates,Var7,fading_in,10,20),[switch_fade_out]) :-
                            findall_can_interrupts(terminates,switch_fade_out,fading_in,10,20) :-
                                can_interrupts(terminates,switch_fade_out,fading_in,Var2 | {Var2 #> 10,Var2 #< 20}) :-
                                    can_terminates(switch_fade_out,fading_in,Var2 | {Var2 #> 10,Var2 #< 20}).
                        not_interrupted_(terminates,fading_in,[switch_fade_out],10,20) :-
                            findall(Var8,interrupted(terminates,switch_fade_out,fading_in,Var8,10,20),[]),
                            all_entirely_outside_of_interval([],10,20),
                            not_interrupted_(terminates,fading_in,[],10,20).
                    not_interrupted(releases,fading_in,10,20) :-
                        findall(Var9,findall_can_interrupts(releases,Var9,fading_in,10,20),[]),
                        not_interrupted_(releases,fading_in,[],10,20).
        initiates(switch_fade_out,fading_out,20),
        trajectory(fading_out,20,brightness(0),30) :-
            holdsAt(brightness(10),20) :-
                max_time(45),
                can_trajectory(fading_in,10,brightness(10),20),
                can_initiates(turn_light_on,fading_in,10),
                happens(turn_light_on,10),
                proved(initiates(turn_light_on,fading_in,10)),
                proved(trajectory(fading_in,10,brightness(10),20)),
                proved(not_stoppedIn(10,fading_in,20)).
        not_stoppedIn(20,fading_out,30) :-
            not_interrupted(terminates,fading_out,20,30) :-
                findall(Var10,findall_can_interrupts(terminates,Var10,fading_out,20,30),[switch_fade_in]) :-
                    findall_can_interrupts(terminates,switch_fade_in,fading_out,20,30) :-
                        can_interrupts(terminates,switch_fade_in,fading_out,Var3 | {Var3 #> 20,Var3 #< 30}) :-
                            can_terminates(switch_fade_in,fading_out,Var3 | {Var3 #> 20,Var3 #< 30}).
                not_interrupted_(terminates,fading_out,[switch_fade_in],20,30) :-
                    findall(Var11,interrupted(terminates,switch_fade_in,fading_out,Var11,20,30),[]),
                    all_entirely_outside_of_interval([],20,30),
                    not_interrupted_(terminates,fading_out,[],20,30).
            not_interrupted(releases,fading_out,20,30) :-
                findall(Var12,findall_can_interrupts(releases,Var12,fading_out,20,30),[]),
                not_interrupted_(releases,fading_out,[],20,30).
global_constraint.

MODEL:
{ happens(switch_fade_in,30),  happens(switch_fade_out,20),  happens(turn_light_on,10),  initiates(turn_light_on,fading_in,10),  trajectory(fading_in,10,brightness(10),20),  holdsAt(brightness(0),10),  initiallyP(brightness(0)),  not_stoppedIn(0,brightness(0),10),  not_stoppedIn(10,fading_in,20),  initiates(switch_fade_out,fading_out,20),  trajectory(fading_out,20,brightness(0),30),  holdsAt(brightness(10),20),  not_stoppedIn(20,fading_out,30) }
BINDINGS: 
T = 30


  real      0:00.45
  real [s]  0.45
  user [s]  0.21
  sys  [s]  0.03
  mem  [KB] 28632
  avgm [KB] 0

$ scasp -s0 --ec ../../axioms/bec_scasp.pl ./model.pl --zeno_halt --tree


% QUERY:?- happens(E,T).

	ANSWER:	1 (in 5.048 ms)

JUSTIFICATION_TREE:
happens(signal_train_entered,11) :-
    holdsAt(train_position(10),11) :-
        max_time(100),
        can_trajectory(train_moving,1,train_position(10),11),
        can_initiates(start,train_moving,1),
        happens(start,1),
        initiates(start,train_moving,1),
        trajectory(train_moving,1,train_position(10),11) :-
            train_speed(1),
            holdsAt(train_position(0),1) :-
                max_time(100),
                initiallyP(train_position(0)),
                not_stoppedIn(0,train_position(0),1) :-
                    not_interrupted(terminates,train_position(0),0,1) :-
                        findall(Var3,findall_can_interrupts(terminates,Var3,train_position(0),0,1),[]),
                        not_interrupted_(terminates,train_position(0),[],0,1).
                    not_interrupted(releases,train_position(0),0,1) :-
                        findall(Var4,findall_can_interrupts(releases,Var4,train_position(0),0,1),[start]) :-
                            findall_can_interrupts(releases,start,train_position(0),0,1) :-
                                can_interrupts(releases,start,train_position(0),Var2 | {Var2 #> 0,Var2 #< 1}) :-
                                    can_releases(start,train_position(0),Var2 | {Var2 #> 0,Var2 #< 1}).
                        not_interrupted_(releases,train_position(0),[start],0,1) :-
                            findall(Var5,interrupted(releases,start,train_position(0),Var5,0,1),[]),
                            all_entirely_outside_of_interval([],0,1),
                            not_interrupted_(releases,train_position(0),[],0,1).
        not_stoppedIn(1,train_moving,11) :-
            not_interrupted(terminates,train_moving,1,11) :-
                findall(Var6,findall_can_interrupts(terminates,Var6,train_moving,1,11),[]),
                not_interrupted_(terminates,train_moving,[],1,11).
            not_interrupted(releases,train_moving,1,11) :-
                findall(Var7,findall_can_interrupts(releases,Var7,train_moving,1,11),[]),
                not_interrupted_(releases,train_moving,[],1,11).
global_constraint.

MODEL:
{ happens(signal_train_entered,11),  holdsAt(train_position(10),11),  happens(start,1),  initiates(start,train_moving,1),  trajectory(train_moving,1,train_position(10),11),  holdsAt(train_position(0),1),  initiallyP(train_position(0)),  not_stoppedIn(0,train_position(0),1),  not_stoppedIn(1,train_moving,11) }
BINDINGS: 
E = signal_train_entered 
T = 11


	ANSWER:	2 (in 0.0 ms)

JUSTIFICATION_TREE:
happens(signal_train_exited,21) :-
    holdsAt(train_position(20),21) :-
        max_time(100),
        can_trajectory(train_moving,1,train_position(20),21),
        can_initiates(start,train_moving,1),
        happens(start,1),
        initiates(start,train_moving,1),
        trajectory(train_moving,1,train_position(20),21) :-
            train_speed(1),
            holdsAt(train_position(0),1) :-
                max_time(100),
                initiallyP(train_position(0)),
                not_stoppedIn(0,train_position(0),1) :-
                    not_interrupted(terminates,train_position(0),0,1) :-
                        findall(Var3,findall_can_interrupts(terminates,Var3,train_position(0),0,1),[]),
                        not_interrupted_(terminates,train_position(0),[],0,1).
                    not_interrupted(releases,train_position(0),0,1) :-
                        findall(Var4,findall_can_interrupts(releases,Var4,train_position(0),0,1),[start]) :-
                            findall_can_interrupts(releases,start,train_position(0),0,1) :-
                                can_interrupts(releases,start,train_position(0),Var2 | {Var2 #> 0,Var2 #< 1}) :-
                                    can_releases(start,train_position(0),Var2 | {Var2 #> 0,Var2 #< 1}).
                        not_interrupted_(releases,train_position(0),[start],0,1) :-
                            findall(Var5,interrupted(releases,start,train_position(0),Var5,0,1),[]),
                            all_entirely_outside_of_interval([],0,1),
                            not_interrupted_(releases,train_position(0),[],0,1).
        not_stoppedIn(1,train_moving,21) :-
            not_interrupted(terminates,train_moving,1,21) :-
                findall(Var6,findall_can_interrupts(terminates,Var6,train_moving,1,21),[]),
                not_interrupted_(terminates,train_moving,[],1,21).
            not_interrupted(releases,train_moving,1,21) :-
                findall(Var7,findall_can_interrupts(releases,Var7,train_moving,1,21),[]),
                not_interrupted_(releases,train_moving,[],1,21).
global_constraint.

MODEL:
{ happens(signal_train_exited,21),  holdsAt(train_position(20),21),  happens(start,1),  initiates(start,train_moving,1),  trajectory(train_moving,1,train_position(20),21),  holdsAt(train_position(0),1),  initiallyP(train_position(0)),  not_stoppedIn(0,train_position(0),1),  not_stoppedIn(1,train_moving,21) }
BINDINGS: 
E = signal_train_exited 
T = 21


	ANSWER:	3 (in 6.037 ms)

JUSTIFICATION_TREE:
happens(signal_gate_start_lowering,6) :-
    holdsAt(train_position(5),6) :-
        max_time(100),
        can_trajectory(train_moving,1,train_position(5),6),
        can_initiates(start,train_moving,1),
        happens(start,1),
        initiates(start,train_moving,1),
        trajectory(train_moving,1,train_position(5),6) :-
            train_speed(1),
            holdsAt(train_position(0),1) :-
                max_time(100),
                initiallyP(train_position(0)),
                not_stoppedIn(0,train_position(0),1) :-
                    not_interrupted(terminates,train_position(0),0,1) :-
                        findall(Var3,findall_can_interrupts(terminates,Var3,train_position(0),0,1),[]),
                        not_interrupted_(terminates,train_position(0),[],0,1).
                    not_interrupted(releases,train_position(0),0,1) :-
                        findall(Var4,findall_can_interrupts(releases,Var4,train_position(0),0,1),[start]) :-
                            findall_can_interrupts(releases,start,train_position(0),0,1) :-
                                can_interrupts(releases,start,train_position(0),Var2 | {Var2 #> 0,Var2 #< 1}) :-
                                    can_releases(start,train_position(0),Var2 | {Var2 #> 0,Var2 #< 1}).
                        not_interrupted_(releases,train_position(0),[start],0,1) :-
                            findall(Var5,interrupted(releases,start,train_position(0),Var5,0,1),[]),
                            all_entirely_outside_of_interval([],0,1),
                            not_interrupted_(releases,train_position(0),[],0,1).
        not_stoppedIn(1,train_moving,6) :-
            not_interrupted(terminates,train_moving,1,6) :-
                findall(Var6,findall_can_interrupts(terminates,Var6,train_moving,1,6),[]),
                not_interrupted_(terminates,train_moving,[],1,6).
            not_interrupted(releases,train_moving,1,6) :-
                findall(Var7,findall_can_interrupts(releases,Var7,train_moving,1,6),[]),
                not_interrupted_(releases,train_moving,[],1,6).
global_constraint.

MODEL:
{ happens(signal_gate_start_lowering,6),  holdsAt(train_position(5),6),  happens(start,1),  initiates(start,train_moving,1),  trajectory(train_moving,1,train_position(5),6),  holdsAt(train_position(0),1),  initiallyP(train_position(0)),  not_stoppedIn(0,train_position(0),1),  not_stoppedIn(1,train_moving,6) }
BINDINGS: 
E = signal_gate_start_lowering 
T = 6


WARNING: Detected a zeno descending chain on happens/2. Terminating execution.
	happens(signal_gate_closed, {_246632~[_246632 > 0, _246632 < 6]} )
	happens(signal_gate_closed, {_247385~[_247385 > 0, _247385 < 6]} )


--------------------- Calling:  happens(signal_gate_closed,_247385) -------------
    happens(signal_gate_closed,9)
        builtin(!spy)
        holdsAt(gate_angle(90),9)
            6.>.0
            6.<.9
            max_time(100)
            9.=<.100
            can_trajectory(gate_is_lowering,6,gate_angle(90),9)
            can_initiates(signal_gate_start_lowering,gate_is_lowering,6)
            happens(signal_gate_start_lowering,6)
                holdsAt(train_position(5),6)
                    1.>.0
                    1.<.6
                    max_time(100)
                    6.=<.100
                    can_trajectory(train_moving,1,train_position(5),6)
                    can_initiates(start,train_moving,1)
                    happens(start,1)
                    initiates(start,train_moving,1)
                    trajectory(train_moving,1,train_position(5),6)
                        train_speed(1)
                        5.=.0+(6-1)*1
                        holdsAt(train_position(0),1)
                            1.>=.0
                            max_time(100)
                            1.=<.100
                            initiallyP(train_position(0))
                            not_stoppedIn(0,train_position(0),1)
                                0.=<.1
                                not_interrupted(terminates,train_position(0),0,1)
                                    findall(_241926,findall_can_interrupts(terminates,_241926,train_position(0),0,1),[])
                                    not_interrupted_(terminates,train_position(0),[],0,1)
                                not_interrupted(releases,train_position(0),0,1)
                                    findall(_242220,findall_can_interrupts(releases,_242220,train_position(0),0,1),[start])
                                        findall_can_interrupts(releases,start,train_position(0),0,1)
                                             {_242377~[_242377 > 0, _242377 < 1]} .>.0
                                             {_242377~[_242377 > 0, _242377 < 1]} .<.1
                                            can_interrupts(releases,start,train_position(0), {_242377~[_242377 > 0, _242377 < 1]} )
                                                can_releases(start,train_position(0), {_242377~[_242377 > 0, _242377 < 1]} )
                                    not_interrupted_(releases,train_position(0),[start],0,1)
                                        findall(_242587,interrupted(releases,start,train_position(0),_242587,0,1),[])
                                        all_entirely_outside_of_interval([],0,1)
                                        not_interrupted_(releases,train_position(0),[],0,1)
                    not_stoppedIn(1,train_moving,6)
                        1.=<.6
                        not_interrupted(terminates,train_moving,1,6)
                            findall(_243435,findall_can_interrupts(terminates,_243435,train_moving,1,6),[])
                            not_interrupted_(terminates,train_moving,[],1,6)
                        not_interrupted(releases,train_moving,1,6)
                            findall(_243729,findall_can_interrupts(releases,_243729,train_moving,1,6),[])
                            not_interrupted_(releases,train_moving,[],1,6)
            initiates(signal_gate_start_lowering,gate_is_lowering,6)
            trajectory(gate_is_lowering,6,gate_angle(90),9)
                90.>=.0
                90.=<.90
                angle_lower_rate(30)
                90.=.0+(9-6)*30
                holdsAt(gate_angle(0),6)
                    6.>=.0
                    max_time(100)
                    6.=<.100
                    initiallyP(gate_angle(0))
                    not_stoppedIn(0,gate_angle(0),6)
                        0.=<.6
                        not_interrupted(terminates,gate_angle(0),0,6)
                            findall(_245781,findall_can_interrupts(terminates,_245781,gate_angle(0),0,6),[signal_gate_closed,signal_gate_open])
                                findall_can_interrupts(terminates,signal_gate_closed,gate_angle(0),0,6)
                                     {_246111~[_246111 > 0, _246111 < 6]} .>.0
                                     {_246111~[_246111 > 0, _246111 < 6]} .<.6
                                    can_interrupts(terminates,signal_gate_closed,gate_angle(0), {_246111~[_246111 > 0, _246111 < 6]} )
                                        can_terminates(signal_gate_closed,gate_angle(0), {_246111~[_246111 > 0, _246111 < 6]} )
                                findall_can_interrupts(terminates,signal_gate_open,gate_angle(0),0,6)
                                     {_245938~[_245938 > 0, _245938 < 6]} .>.0
                                     {_245938~[_245938 > 0, _245938 < 6]} .<.6
                                    can_interrupts(terminates,signal_gate_open,gate_angle(0), {_245938~[_245938 > 0, _245938 < 6]} )
                                        can_terminates(signal_gate_open,gate_angle(0), {_245938~[_245938 > 0, _245938 < 6]} )
                            not_interrupted_(terminates,gate_angle(0),[signal_gate_closed,signal_gate_open],0,6)
                                interrupted(terminates,signal_gate_closed,gate_angle(0), {_246632~[_246632 > 0, _246632 < 6]} ,0,6)
                                     {_246632~[_246632 > 0, _246632 < 6]} .>.0
                                     {_246632~[_246632 > 0, _2619 < 6]} .<.6
                                    can_interrupts(terminates,signal_gate_closed,gate_angle(0), {_2619~[_2619 > 0, _2619 < 6]} )
                                        can_terminates(signal_gate_closed,gate_angle(0), {_2619~[_2619 > 0, _2619 < 6]} )
                                    happens(signal_gate_closed, {_2619~[_2619 > 0, _2619 < 6]} )
                                        builtin(!spy)
                                        holdsAt(gate_angle(90), {_2619~[_2619 > 0, _2619 < 6]} )
                                             {_2824~[_2824 > 0, _2824 < 6]} .>.0
                                             {_2824~[_2824 > 0, _2824 < 6]} .<. {_2619~[_2619 > 0, _2619 < 6]} 
                                            max_time(100)
                                             {_2619~[_2619 > 0, _2619 < 6]} .=<.100
                                            can_initiates(signal_gate_closed,gate_angle(90), {_2824~[_2824 > 0, _2824 < 6]} )
                                            happens(signal_gate_closed, {_2824~[_2824 > 0, _2824 < 6]} )

  real      0:00.96
  real [s]  0.96
  user [s]  0.47
  sys  [s]  0.05
  mem  [KB] 29232
  avgm [KB] 0

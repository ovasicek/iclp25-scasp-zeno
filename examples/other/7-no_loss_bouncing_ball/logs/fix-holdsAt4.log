$ scasp -s0 --ec ../../axioms/bec_scasp.pl ./fix-holdsAt4.pl --tree


% QUERY:?- happens(hit_ground,T).

	ANSWER:	1 (in 10.593 ms)

JUSTIFICATION_TREE:
happens(hit_ground,20) :-
    duration(10) :-
        initiallyP(height(10)),
        initiallyP(constant_fall_rate(1)).
    holdsAt(height(0),20,falling,10) :-
        max_time(100),
        can_trajectory(falling,10,height(0),20),
        can_initiates(fall_down,falling,10),
        happens(fall_down,10) :-
            happens(drop,10).
        initiates(fall_down,falling,10),
        trajectory(falling,10,height(0),20) :-
            initiallyP(constant_fall_rate(1)),
            holdsAt(height(10),10) :-
                max_time(100),
                proved(initiallyP(height(10))),
                not_stoppedIn(0,height(10),10) :-
                    not_interrupted(terminates,height(10),0,10) :-
                        findall(Var5,findall_can_interrupts(terminates,Var5,height(10),0,10),[catch]) :-
                            findall_can_interrupts(terminates,catch,height(10),0,10) :-
                                can_interrupts(terminates,catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}) :-
                                    can_terminates(catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}).
                        not_interrupted_(terminates,height(10),[catch],0,10) :-
                            findall(Var6,interrupted(terminates,catch,height(10),Var6,0,10),[]),
                            all_entirely_outside_of_interval([],0,10),
                            not_interrupted_(terminates,height(10),[],0,10).
                    not_interrupted(releases,height(10),0,10) :-
                        findall(Var7,findall_can_interrupts(releases,Var7,height(10),0,10),[drop]) :-
                            findall_can_interrupts(releases,drop,height(10),0,10) :-
                                can_interrupts(releases,drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}) :-
                                    can_releases(drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}).
                        not_interrupted_(releases,height(10),[drop],0,10) :-
                            findall(Var8,interrupted(releases,drop,height(10),Var8,0,10),[]),
                            proved(all_entirely_outside_of_interval([],0,10)),
                            not_interrupted_(releases,height(10),[],0,10).
        not_stoppedIn(10,falling,20) :-
            not_interrupted(terminates,falling,10,20) :-
                findall(Var9,findall_can_interrupts(terminates,Var9,falling,10,20),[hit_ground,catch]) :-
                    findall_can_interrupts(terminates,hit_ground,falling,10,20) :-
                        can_interrupts(terminates,hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}) :-
                            can_terminates(hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}).
                    findall_can_interrupts(terminates,catch,falling,10,20) :-
                        can_interrupts(terminates,catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}) :-
                            can_terminates(catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}).
                not_interrupted_(terminates,falling,[hit_ground,catch],10,20) :-
                    findall(Var10,interrupted(terminates,hit_ground,falling,Var10,10,20),[]),
                    all_entirely_outside_of_interval([],10,20),
                    not_interrupted_(terminates,falling,[catch],10,20) :-
                        findall(Var11,interrupted(terminates,catch,falling,Var11,10,20),[]),
                        proved(all_entirely_outside_of_interval([],10,20)),
                        not_interrupted_(terminates,falling,[],10,20).
            not_interrupted(releases,falling,10,20) :-
                findall(Var12,findall_can_interrupts(releases,Var12,falling,10,20),[]),
                not_interrupted_(releases,falling,[],10,20).
global_constraint.

MODEL:
{ happens(hit_ground,20),  initiallyP(height(10)),  initiallyP(constant_fall_rate(1)),  happens(fall_down,10),  happens(drop,10),  initiates(fall_down,falling,10),  trajectory(falling,10,height(0),20),  holdsAt(height(10),10),  not_stoppedIn(0,height(10),10),  not_stoppedIn(10,falling,20) }
BINDINGS: 
T = 20


	ANSWER:	2 (in 98.288 ms)

JUSTIFICATION_TREE:
happens(hit_ground,40) :-
    duration(10) :-
        initiallyP(height(10)),
        initiallyP(constant_fall_rate(1)).
    holdsAt(height(0),40,falling,10) :-
        max_time(100),
        can_trajectory(falling,30,height(0),40),
        can_initiates(fall_down,falling,30),
        happens(fall_down,30) :-
            happens(reach_apex,30) :-
                duration(10) :-
                    initiallyP(height(10)),
                    initiallyP(constant_fall_rate(1)).
                holdsAt(velocity(0),30,rising,10) :-
                    max_time(100),
                    can_trajectory(rising,20,velocity(0),30),
                    can_initiates(bounce_up,rising,20),
                    happens(bounce_up,20) :-
                        happens(hit_ground,20) :-
                            duration(10) :-
                                initiallyP(height(10)),
                                initiallyP(constant_fall_rate(1)).
                            holdsAt(height(0),20,falling,10) :-
                                max_time(100),
                                can_trajectory(falling,10,height(0),20),
                                can_initiates(fall_down,falling,10),
                                happens(fall_down,10) :-
                                    happens(drop,10).
                                initiates(fall_down,falling,10),
                                trajectory(falling,10,height(0),20) :-
                                    initiallyP(constant_fall_rate(1)),
                                    holdsAt(height(10),10) :-
                                        max_time(100),
                                        proved(initiallyP(height(10))),
                                        not_stoppedIn(0,height(10),10) :-
                                            not_interrupted(terminates,height(10),0,10) :-
                                                findall(Var11,findall_can_interrupts(terminates,Var11,height(10),0,10),[catch]) :-
                                                    findall_can_interrupts(terminates,catch,height(10),0,10) :-
                                                        can_interrupts(terminates,catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}) :-
                                                            can_terminates(catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}).
                                                not_interrupted_(terminates,height(10),[catch],0,10) :-
                                                    findall(Var12,interrupted(terminates,catch,height(10),Var12,0,10),[]),
                                                    all_entirely_outside_of_interval([],0,10),
                                                    not_interrupted_(terminates,height(10),[],0,10).
                                            not_interrupted(releases,height(10),0,10) :-
                                                findall(Var13,findall_can_interrupts(releases,Var13,height(10),0,10),[drop]) :-
                                                    findall_can_interrupts(releases,drop,height(10),0,10) :-
                                                        can_interrupts(releases,drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}) :-
                                                            can_releases(drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}).
                                                not_interrupted_(releases,height(10),[drop],0,10) :-
                                                    findall(Var14,interrupted(releases,drop,height(10),Var14,0,10),[]),
                                                    proved(all_entirely_outside_of_interval([],0,10)),
                                                    not_interrupted_(releases,height(10),[],0,10).
                                not_stoppedIn(10,falling,20) :-
                                    not_interrupted(terminates,falling,10,20) :-
                                        findall(Var15,findall_can_interrupts(terminates,Var15,falling,10,20),[hit_ground,catch]) :-
                                            findall_can_interrupts(terminates,hit_ground,falling,10,20) :-
                                                can_interrupts(terminates,hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}) :-
                                                    can_terminates(hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}).
                                            findall_can_interrupts(terminates,catch,falling,10,20) :-
                                                can_interrupts(terminates,catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}) :-
                                                    can_terminates(catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}).
                                        not_interrupted_(terminates,falling,[hit_ground,catch],10,20) :-
                                            findall(Var16,interrupted(terminates,hit_ground,falling,Var16,10,20),[]),
                                            all_entirely_outside_of_interval([],10,20),
                                            not_interrupted_(terminates,falling,[catch],10,20) :-
                                                findall(Var17,interrupted(terminates,catch,falling,Var17,10,20),[]),
                                                proved(all_entirely_outside_of_interval([],10,20)),
                                                not_interrupted_(terminates,falling,[],10,20).
                                    not_interrupted(releases,falling,10,20) :-
                                        findall(Var18,findall_can_interrupts(releases,Var18,falling,10,20),[]),
                                        not_interrupted_(releases,falling,[],10,20).
                    initiates(bounce_up,rising,20),
                    trajectory(rising,20,velocity(0),30) :-
                        initiallyP(constant_fall_rate(1)),
                        holdsAt(velocity(10),20) :-
                            max_time(100),
                            can_trajectory(falling,10,velocity(10),20),
                            can_initiates(fall_down,falling,10),
                            happens(fall_down,10) :-
                                happens(drop,10).
                            proved(initiates(fall_down,falling,10)),
                            trajectory(falling,10,velocity(10),20) :-
                                initiallyP(constant_fall_rate(1)),
                                holdsAt(velocity(0),10) :-
                                    max_time(100),
                                    initiallyP(velocity(0)),
                                    not_stoppedIn(0,velocity(0),10) :-
                                        not_interrupted(terminates,velocity(0),0,10) :-
                                            findall(Var19,findall_can_interrupts(terminates,Var19,velocity(0),0,10),[catch]) :-
                                                findall_can_interrupts(terminates,catch,velocity(0),0,10) :-
                                                    can_interrupts(terminates,catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}) :-
                                                        can_terminates(catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}).
                                            not_interrupted_(terminates,velocity(0),[catch],0,10) :-
                                                findall(Var20,interrupted(terminates,catch,velocity(0),Var20,0,10),[]),
                                                proved(all_entirely_outside_of_interval([],0,10)),
                                                not_interrupted_(terminates,velocity(0),[],0,10).
                                        not_interrupted(releases,velocity(0),0,10) :-
                                            findall(Var21,findall_can_interrupts(releases,Var21,velocity(0),0,10),[drop]) :-
                                                findall_can_interrupts(releases,drop,velocity(0),0,10) :-
                                                    can_interrupts(releases,drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}) :-
                                                        can_releases(drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}).
                                            not_interrupted_(releases,velocity(0),[drop],0,10) :-
                                                findall(Var22,interrupted(releases,drop,velocity(0),Var22,0,10),[]),
                                                proved(all_entirely_outside_of_interval([],0,10)),
                                                not_interrupted_(releases,velocity(0),[],0,10).
                            proved(not_stoppedIn(10,falling,20)).
                    not_stoppedIn(20,rising,30) :-
                        not_interrupted(terminates,rising,20,30) :-
                            findall(Var23,findall_can_interrupts(terminates,Var23,rising,20,30),[reach_apex,catch]) :-
                                findall_can_interrupts(terminates,reach_apex,rising,20,30) :-
                                    can_interrupts(terminates,reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}) :-
                                        can_terminates(reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}).
                                findall_can_interrupts(terminates,catch,rising,20,30) :-
                                    can_interrupts(terminates,catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}) :-
                                        can_terminates(catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}).
                            not_interrupted_(terminates,rising,[reach_apex,catch],20,30) :-
                                findall(Var24,interrupted(terminates,reach_apex,rising,Var24,20,30),[]),
                                all_entirely_outside_of_interval([],20,30),
                                not_interrupted_(terminates,rising,[catch],20,30) :-
                                    findall(Var25,interrupted(terminates,catch,rising,Var25,20,30),[]),
                                    proved(all_entirely_outside_of_interval([],20,30)),
                                    not_interrupted_(terminates,rising,[],20,30).
                        not_interrupted(releases,rising,20,30) :-
                            findall(Var26,findall_can_interrupts(releases,Var26,rising,20,30),[]),
                            not_interrupted_(releases,rising,[],20,30).
        initiates(fall_down,falling,30),
        trajectory(falling,30,height(0),40) :-
            initiallyP(constant_fall_rate(1)),
            holdsAt(height(10),30) :-
                max_time(100),
                can_trajectory(rising,20,height(10),30),
                can_initiates(bounce_up,rising,20),
                happens(bounce_up,20) :-
                    happens(hit_ground,20) :-
                        duration(10) :-
                            initiallyP(height(10)),
                            initiallyP(constant_fall_rate(1)).
                        holdsAt(height(0),20,falling,10) :-
                            max_time(100),
                            can_trajectory(falling,10,height(0),20),
                            can_initiates(fall_down,falling,10),
                            happens(fall_down,10) :-
                                happens(drop,10).
                            proved(initiates(fall_down,falling,10)),
                            proved(trajectory(falling,10,height(0),20)),
                            proved(not_stoppedIn(10,falling,20)).
                proved(initiates(bounce_up,rising,20)),
                trajectory(rising,20,height(10),30) :-
                    initiallyP(constant_fall_rate(1)),
                    holdsAt(height(0),20) :-
                        max_time(100),
                        can_trajectory(falling,10,height(0),20),
                        can_initiates(fall_down,falling,10),
                        happens(fall_down,10) :-
                            happens(drop,10).
                        proved(initiates(fall_down,falling,10)),
                        proved(trajectory(falling,10,height(0),20)),
                        proved(not_stoppedIn(10,falling,20)).
                proved(not_stoppedIn(20,rising,30)).
        not_stoppedIn(30,falling,40) :-
            not_interrupted(terminates,falling,30,40) :-
                findall(Var27,findall_can_interrupts(terminates,Var27,falling,30,40),[hit_ground,catch]) :-
                    findall_can_interrupts(terminates,hit_ground,falling,30,40) :-
                        can_interrupts(terminates,hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}) :-
                            can_terminates(hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}).
                    findall_can_interrupts(terminates,catch,falling,30,40) :-
                        can_interrupts(terminates,catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}) :-
                            can_terminates(catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}).
                not_interrupted_(terminates,falling,[hit_ground,catch],30,40) :-
                    findall(Var28,interrupted(terminates,hit_ground,falling,Var28,30,40),[]),
                    all_entirely_outside_of_interval([],30,40),
                    not_interrupted_(terminates,falling,[catch],30,40) :-
                        findall(Var29,interrupted(terminates,catch,falling,Var29,30,40),[]),
                        proved(all_entirely_outside_of_interval([],30,40)),
                        not_interrupted_(terminates,falling,[],30,40).
            not_interrupted(releases,falling,30,40) :-
                findall(Var30,findall_can_interrupts(releases,Var30,falling,30,40),[]),
                not_interrupted_(releases,falling,[],30,40).
global_constraint.

MODEL:
{ happens(hit_ground,40),  initiallyP(height(10)),  initiallyP(constant_fall_rate(1)),  happens(fall_down,30),  happens(reach_apex,30),  happens(bounce_up,20),  happens(hit_ground,20),  happens(fall_down,10),  happens(drop,10),  initiates(fall_down,falling,10),  trajectory(falling,10,height(0),20),  holdsAt(height(10),10),  not_stoppedIn(0,height(10),10),  not_stoppedIn(10,falling,20),  initiates(bounce_up,rising,20),  trajectory(rising,20,velocity(0),30),  holdsAt(velocity(10),20),  trajectory(falling,10,velocity(10),20),  holdsAt(velocity(0),10),  initiallyP(velocity(0)),  not_stoppedIn(0,velocity(0),10),  not_stoppedIn(20,rising,30),  initiates(fall_down,falling,30),  trajectory(falling,30,height(0),40),  holdsAt(height(10),30),  trajectory(rising,20,height(10),30),  holdsAt(height(0),20),  not_stoppedIn(30,falling,40) }
BINDINGS: 
T = 40


	ANSWER:	3 (in 577.272 ms)

JUSTIFICATION_TREE:
happens(hit_ground,60) :-
    duration(10) :-
        initiallyP(height(10)),
        initiallyP(constant_fall_rate(1)).
    holdsAt(height(0),60,falling,10) :-
        max_time(100),
        can_trajectory(falling,50,height(0),60),
        can_initiates(fall_down,falling,50),
        happens(fall_down,50) :-
            happens(reach_apex,50) :-
                duration(10) :-
                    initiallyP(height(10)),
                    initiallyP(constant_fall_rate(1)).
                holdsAt(velocity(0),50,rising,10) :-
                    max_time(100),
                    can_trajectory(rising,40,velocity(0),50),
                    can_initiates(bounce_up,rising,40),
                    happens(bounce_up,40) :-
                        happens(hit_ground,40) :-
                            duration(10) :-
                                initiallyP(height(10)),
                                initiallyP(constant_fall_rate(1)).
                            holdsAt(height(0),40,falling,10) :-
                                max_time(100),
                                can_trajectory(falling,30,height(0),40),
                                can_initiates(fall_down,falling,30),
                                happens(fall_down,30) :-
                                    happens(reach_apex,30) :-
                                        duration(10) :-
                                            initiallyP(height(10)),
                                            initiallyP(constant_fall_rate(1)).
                                        holdsAt(velocity(0),30,rising,10) :-
                                            max_time(100),
                                            can_trajectory(rising,20,velocity(0),30),
                                            can_initiates(bounce_up,rising,20),
                                            happens(bounce_up,20) :-
                                                happens(hit_ground,20) :-
                                                    duration(10) :-
                                                        initiallyP(height(10)),
                                                        initiallyP(constant_fall_rate(1)).
                                                    holdsAt(height(0),20,falling,10) :-
                                                        max_time(100),
                                                        can_trajectory(falling,10,height(0),20),
                                                        can_initiates(fall_down,falling,10),
                                                        happens(fall_down,10) :-
                                                            happens(drop,10).
                                                        initiates(fall_down,falling,10),
                                                        trajectory(falling,10,height(0),20) :-
                                                            initiallyP(constant_fall_rate(1)),
                                                            holdsAt(height(10),10) :-
                                                                max_time(100),
                                                                proved(initiallyP(height(10))),
                                                                not_stoppedIn(0,height(10),10) :-
                                                                    not_interrupted(terminates,height(10),0,10) :-
                                                                        findall(Var15,findall_can_interrupts(terminates,Var15,height(10),0,10),[catch]) :-
                                                                            findall_can_interrupts(terminates,catch,height(10),0,10) :-
                                                                                can_interrupts(terminates,catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}) :-
                                                                                    can_terminates(catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}).
                                                                        not_interrupted_(terminates,height(10),[catch],0,10) :-
                                                                            findall(Var16,interrupted(terminates,catch,height(10),Var16,0,10),[]),
                                                                            all_entirely_outside_of_interval([],0,10),
                                                                            not_interrupted_(terminates,height(10),[],0,10).
                                                                    not_interrupted(releases,height(10),0,10) :-
                                                                        findall(Var17,findall_can_interrupts(releases,Var17,height(10),0,10),[drop]) :-
                                                                            findall_can_interrupts(releases,drop,height(10),0,10) :-
                                                                                can_interrupts(releases,drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}) :-
                                                                                    can_releases(drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}).
                                                                        not_interrupted_(releases,height(10),[drop],0,10) :-
                                                                            findall(Var18,interrupted(releases,drop,height(10),Var18,0,10),[]),
                                                                            proved(all_entirely_outside_of_interval([],0,10)),
                                                                            not_interrupted_(releases,height(10),[],0,10).
                                                        not_stoppedIn(10,falling,20) :-
                                                            not_interrupted(terminates,falling,10,20) :-
                                                                findall(Var19,findall_can_interrupts(terminates,Var19,falling,10,20),[hit_ground,catch]) :-
                                                                    findall_can_interrupts(terminates,hit_ground,falling,10,20) :-
                                                                        can_interrupts(terminates,hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}) :-
                                                                            can_terminates(hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}).
                                                                    findall_can_interrupts(terminates,catch,falling,10,20) :-
                                                                        can_interrupts(terminates,catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}) :-
                                                                            can_terminates(catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}).
                                                                not_interrupted_(terminates,falling,[hit_ground,catch],10,20) :-
                                                                    findall(Var20,interrupted(terminates,hit_ground,falling,Var20,10,20),[]),
                                                                    all_entirely_outside_of_interval([],10,20),
                                                                    not_interrupted_(terminates,falling,[catch],10,20) :-
                                                                        findall(Var21,interrupted(terminates,catch,falling,Var21,10,20),[]),
                                                                        proved(all_entirely_outside_of_interval([],10,20)),
                                                                        not_interrupted_(terminates,falling,[],10,20).
                                                            not_interrupted(releases,falling,10,20) :-
                                                                findall(Var22,findall_can_interrupts(releases,Var22,falling,10,20),[]),
                                                                not_interrupted_(releases,falling,[],10,20).
                                            initiates(bounce_up,rising,20),
                                            trajectory(rising,20,velocity(0),30) :-
                                                initiallyP(constant_fall_rate(1)),
                                                holdsAt(velocity(10),20) :-
                                                    max_time(100),
                                                    can_trajectory(falling,10,velocity(10),20),
                                                    can_initiates(fall_down,falling,10),
                                                    happens(fall_down,10) :-
                                                        happens(drop,10).
                                                    proved(initiates(fall_down,falling,10)),
                                                    trajectory(falling,10,velocity(10),20) :-
                                                        initiallyP(constant_fall_rate(1)),
                                                        holdsAt(velocity(0),10) :-
                                                            max_time(100),
                                                            initiallyP(velocity(0)),
                                                            not_stoppedIn(0,velocity(0),10) :-
                                                                not_interrupted(terminates,velocity(0),0,10) :-
                                                                    findall(Var23,findall_can_interrupts(terminates,Var23,velocity(0),0,10),[catch]) :-
                                                                        findall_can_interrupts(terminates,catch,velocity(0),0,10) :-
                                                                            can_interrupts(terminates,catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}) :-
                                                                                can_terminates(catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}).
                                                                    not_interrupted_(terminates,velocity(0),[catch],0,10) :-
                                                                        findall(Var24,interrupted(terminates,catch,velocity(0),Var24,0,10),[]),
                                                                        proved(all_entirely_outside_of_interval([],0,10)),
                                                                        not_interrupted_(terminates,velocity(0),[],0,10).
                                                                not_interrupted(releases,velocity(0),0,10) :-
                                                                    findall(Var25,findall_can_interrupts(releases,Var25,velocity(0),0,10),[drop]) :-
                                                                        findall_can_interrupts(releases,drop,velocity(0),0,10) :-
                                                                            can_interrupts(releases,drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}) :-
                                                                                can_releases(drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}).
                                                                    not_interrupted_(releases,velocity(0),[drop],0,10) :-
                                                                        findall(Var26,interrupted(releases,drop,velocity(0),Var26,0,10),[]),
                                                                        proved(all_entirely_outside_of_interval([],0,10)),
                                                                        not_interrupted_(releases,velocity(0),[],0,10).
                                                    proved(not_stoppedIn(10,falling,20)).
                                            not_stoppedIn(20,rising,30) :-
                                                not_interrupted(terminates,rising,20,30) :-
                                                    findall(Var27,findall_can_interrupts(terminates,Var27,rising,20,30),[reach_apex,catch]) :-
                                                        findall_can_interrupts(terminates,reach_apex,rising,20,30) :-
                                                            can_interrupts(terminates,reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}) :-
                                                                can_terminates(reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}).
                                                        findall_can_interrupts(terminates,catch,rising,20,30) :-
                                                            can_interrupts(terminates,catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}) :-
                                                                can_terminates(catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}).
                                                    not_interrupted_(terminates,rising,[reach_apex,catch],20,30) :-
                                                        findall(Var28,interrupted(terminates,reach_apex,rising,Var28,20,30),[]),
                                                        all_entirely_outside_of_interval([],20,30),
                                                        not_interrupted_(terminates,rising,[catch],20,30) :-
                                                            findall(Var29,interrupted(terminates,catch,rising,Var29,20,30),[]),
                                                            proved(all_entirely_outside_of_interval([],20,30)),
                                                            not_interrupted_(terminates,rising,[],20,30).
                                                not_interrupted(releases,rising,20,30) :-
                                                    findall(Var30,findall_can_interrupts(releases,Var30,rising,20,30),[]),
                                                    not_interrupted_(releases,rising,[],20,30).
                                initiates(fall_down,falling,30),
                                trajectory(falling,30,height(0),40) :-
                                    initiallyP(constant_fall_rate(1)),
                                    holdsAt(height(10),30) :-
                                        max_time(100),
                                        can_trajectory(rising,20,height(10),30),
                                        can_initiates(bounce_up,rising,20),
                                        happens(bounce_up,20) :-
                                            happens(hit_ground,20) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),20,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,10,height(0),20),
                                                    can_initiates(fall_down,falling,10),
                                                    happens(fall_down,10) :-
                                                        happens(drop,10).
                                                    proved(initiates(fall_down,falling,10)),
                                                    proved(trajectory(falling,10,height(0),20)),
                                                    proved(not_stoppedIn(10,falling,20)).
                                        proved(initiates(bounce_up,rising,20)),
                                        trajectory(rising,20,height(10),30) :-
                                            initiallyP(constant_fall_rate(1)),
                                            holdsAt(height(0),20) :-
                                                max_time(100),
                                                can_trajectory(falling,10,height(0),20),
                                                can_initiates(fall_down,falling,10),
                                                happens(fall_down,10) :-
                                                    happens(drop,10).
                                                proved(initiates(fall_down,falling,10)),
                                                proved(trajectory(falling,10,height(0),20)),
                                                proved(not_stoppedIn(10,falling,20)).
                                        proved(not_stoppedIn(20,rising,30)).
                                not_stoppedIn(30,falling,40) :-
                                    not_interrupted(terminates,falling,30,40) :-
                                        findall(Var31,findall_can_interrupts(terminates,Var31,falling,30,40),[hit_ground,catch]) :-
                                            findall_can_interrupts(terminates,hit_ground,falling,30,40) :-
                                                can_interrupts(terminates,hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}) :-
                                                    can_terminates(hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}).
                                            findall_can_interrupts(terminates,catch,falling,30,40) :-
                                                can_interrupts(terminates,catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}) :-
                                                    can_terminates(catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}).
                                        not_interrupted_(terminates,falling,[hit_ground,catch],30,40) :-
                                            findall(Var32,interrupted(terminates,hit_ground,falling,Var32,30,40),[]),
                                            all_entirely_outside_of_interval([],30,40),
                                            not_interrupted_(terminates,falling,[catch],30,40) :-
                                                findall(Var33,interrupted(terminates,catch,falling,Var33,30,40),[]),
                                                proved(all_entirely_outside_of_interval([],30,40)),
                                                not_interrupted_(terminates,falling,[],30,40).
                                    not_interrupted(releases,falling,30,40) :-
                                        findall(Var34,findall_can_interrupts(releases,Var34,falling,30,40),[]),
                                        not_interrupted_(releases,falling,[],30,40).
                    initiates(bounce_up,rising,40),
                    trajectory(rising,40,velocity(0),50) :-
                        initiallyP(constant_fall_rate(1)),
                        holdsAt(velocity(10),40) :-
                            max_time(100),
                            can_trajectory(falling,30,velocity(10),40),
                            can_initiates(fall_down,falling,30),
                            happens(fall_down,30) :-
                                happens(reach_apex,30) :-
                                    duration(10) :-
                                        initiallyP(height(10)),
                                        initiallyP(constant_fall_rate(1)).
                                    holdsAt(velocity(0),30,rising,10) :-
                                        max_time(100),
                                        can_trajectory(rising,20,velocity(0),30),
                                        can_initiates(bounce_up,rising,20),
                                        happens(bounce_up,20) :-
                                            happens(hit_ground,20) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),20,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,10,height(0),20),
                                                    can_initiates(fall_down,falling,10),
                                                    happens(fall_down,10) :-
                                                        happens(drop,10).
                                                    proved(initiates(fall_down,falling,10)),
                                                    proved(trajectory(falling,10,height(0),20)),
                                                    proved(not_stoppedIn(10,falling,20)).
                                        proved(initiates(bounce_up,rising,20)),
                                        proved(trajectory(rising,20,velocity(0),30)),
                                        proved(not_stoppedIn(20,rising,30)).
                            proved(initiates(fall_down,falling,30)),
                            trajectory(falling,30,velocity(10),40) :-
                                initiallyP(constant_fall_rate(1)),
                                holdsAt(velocity(0),30) :-
                                    max_time(100),
                                    can_trajectory(rising,20,velocity(0),30),
                                    can_initiates(bounce_up,rising,20),
                                    happens(bounce_up,20) :-
                                        happens(hit_ground,20) :-
                                            duration(10) :-
                                                initiallyP(height(10)),
                                                initiallyP(constant_fall_rate(1)).
                                            holdsAt(height(0),20,falling,10) :-
                                                max_time(100),
                                                can_trajectory(falling,10,height(0),20),
                                                can_initiates(fall_down,falling,10),
                                                happens(fall_down,10) :-
                                                    happens(drop,10).
                                                proved(initiates(fall_down,falling,10)),
                                                proved(trajectory(falling,10,height(0),20)),
                                                proved(not_stoppedIn(10,falling,20)).
                                    proved(initiates(bounce_up,rising,20)),
                                    proved(trajectory(rising,20,velocity(0),30)),
                                    proved(not_stoppedIn(20,rising,30)).
                            proved(not_stoppedIn(30,falling,40)).
                    not_stoppedIn(40,rising,50) :-
                        not_interrupted(terminates,rising,40,50) :-
                            findall(Var35,findall_can_interrupts(terminates,Var35,rising,40,50),[reach_apex,catch]) :-
                                findall_can_interrupts(terminates,reach_apex,rising,40,50) :-
                                    can_interrupts(terminates,reach_apex,rising,Var11 | {Var11 #> 40,Var11 #< 50}) :-
                                        can_terminates(reach_apex,rising,Var11 | {Var11 #> 40,Var11 #< 50}).
                                findall_can_interrupts(terminates,catch,rising,40,50) :-
                                    can_interrupts(terminates,catch,rising,Var12 | {Var12 #> 40,Var12 #< 50}) :-
                                        can_terminates(catch,rising,Var12 | {Var12 #> 40,Var12 #< 50}).
                            not_interrupted_(terminates,rising,[reach_apex,catch],40,50) :-
                                findall(Var36,interrupted(terminates,reach_apex,rising,Var36,40,50),[]),
                                all_entirely_outside_of_interval([],40,50),
                                not_interrupted_(terminates,rising,[catch],40,50) :-
                                    findall(Var37,interrupted(terminates,catch,rising,Var37,40,50),[]),
                                    proved(all_entirely_outside_of_interval([],40,50)),
                                    not_interrupted_(terminates,rising,[],40,50).
                        not_interrupted(releases,rising,40,50) :-
                            findall(Var38,findall_can_interrupts(releases,Var38,rising,40,50),[]),
                            not_interrupted_(releases,rising,[],40,50).
        initiates(fall_down,falling,50),
        trajectory(falling,50,height(0),60) :-
            initiallyP(constant_fall_rate(1)),
            holdsAt(height(10),50) :-
                max_time(100),
                can_trajectory(rising,40,height(10),50),
                can_initiates(bounce_up,rising,40),
                happens(bounce_up,40) :-
                    happens(hit_ground,40) :-
                        duration(10) :-
                            initiallyP(height(10)),
                            initiallyP(constant_fall_rate(1)).
                        holdsAt(height(0),40,falling,10) :-
                            max_time(100),
                            can_trajectory(falling,30,height(0),40),
                            can_initiates(fall_down,falling,30),
                            happens(fall_down,30) :-
                                happens(reach_apex,30) :-
                                    duration(10) :-
                                        initiallyP(height(10)),
                                        initiallyP(constant_fall_rate(1)).
                                    holdsAt(velocity(0),30,rising,10) :-
                                        max_time(100),
                                        can_trajectory(rising,20,velocity(0),30),
                                        can_initiates(bounce_up,rising,20),
                                        happens(bounce_up,20) :-
                                            happens(hit_ground,20) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),20,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,10,height(0),20),
                                                    can_initiates(fall_down,falling,10),
                                                    happens(fall_down,10) :-
                                                        happens(drop,10).
                                                    proved(initiates(fall_down,falling,10)),
                                                    proved(trajectory(falling,10,height(0),20)),
                                                    proved(not_stoppedIn(10,falling,20)).
                                        proved(initiates(bounce_up,rising,20)),
                                        proved(trajectory(rising,20,velocity(0),30)),
                                        proved(not_stoppedIn(20,rising,30)).
                            proved(initiates(fall_down,falling,30)),
                            proved(trajectory(falling,30,height(0),40)),
                            proved(not_stoppedIn(30,falling,40)).
                proved(initiates(bounce_up,rising,40)),
                trajectory(rising,40,height(10),50) :-
                    initiallyP(constant_fall_rate(1)),
                    holdsAt(height(0),40) :-
                        max_time(100),
                        can_trajectory(falling,30,height(0),40),
                        can_initiates(fall_down,falling,30),
                        happens(fall_down,30) :-
                            happens(reach_apex,30) :-
                                duration(10) :-
                                    initiallyP(height(10)),
                                    initiallyP(constant_fall_rate(1)).
                                holdsAt(velocity(0),30,rising,10) :-
                                    max_time(100),
                                    can_trajectory(rising,20,velocity(0),30),
                                    can_initiates(bounce_up,rising,20),
                                    happens(bounce_up,20) :-
                                        happens(hit_ground,20) :-
                                            duration(10) :-
                                                initiallyP(height(10)),
                                                initiallyP(constant_fall_rate(1)).
                                            holdsAt(height(0),20,falling,10) :-
                                                max_time(100),
                                                can_trajectory(falling,10,height(0),20),
                                                can_initiates(fall_down,falling,10),
                                                happens(fall_down,10) :-
                                                    happens(drop,10).
                                                proved(initiates(fall_down,falling,10)),
                                                proved(trajectory(falling,10,height(0),20)),
                                                proved(not_stoppedIn(10,falling,20)).
                                    proved(initiates(bounce_up,rising,20)),
                                    proved(trajectory(rising,20,velocity(0),30)),
                                    proved(not_stoppedIn(20,rising,30)).
                        proved(initiates(fall_down,falling,30)),
                        proved(trajectory(falling,30,height(0),40)),
                        proved(not_stoppedIn(30,falling,40)).
                proved(not_stoppedIn(40,rising,50)).
        not_stoppedIn(50,falling,60) :-
            not_interrupted(terminates,falling,50,60) :-
                findall(Var39,findall_can_interrupts(terminates,Var39,falling,50,60),[hit_ground,catch]) :-
                    findall_can_interrupts(terminates,hit_ground,falling,50,60) :-
                        can_interrupts(terminates,hit_ground,falling,Var13 | {Var13 #> 50,Var13 #< 60}) :-
                            can_terminates(hit_ground,falling,Var13 | {Var13 #> 50,Var13 #< 60}).
                    findall_can_interrupts(terminates,catch,falling,50,60) :-
                        can_interrupts(terminates,catch,falling,Var14 | {Var14 #> 50,Var14 #< 60}) :-
                            can_terminates(catch,falling,Var14 | {Var14 #> 50,Var14 #< 60}).
                not_interrupted_(terminates,falling,[hit_ground,catch],50,60) :-
                    findall(Var40,interrupted(terminates,hit_ground,falling,Var40,50,60),[]),
                    all_entirely_outside_of_interval([],50,60),
                    not_interrupted_(terminates,falling,[catch],50,60) :-
                        findall(Var41,interrupted(terminates,catch,falling,Var41,50,60),[]),
                        proved(all_entirely_outside_of_interval([],50,60)),
                        not_interrupted_(terminates,falling,[],50,60).
            not_interrupted(releases,falling,50,60) :-
                findall(Var42,findall_can_interrupts(releases,Var42,falling,50,60),[]),
                not_interrupted_(releases,falling,[],50,60).
global_constraint.

MODEL:
{ happens(hit_ground,60),  initiallyP(height(10)),  initiallyP(constant_fall_rate(1)),  happens(fall_down,50),  happens(reach_apex,50),  happens(bounce_up,40),  happens(hit_ground,40),  happens(fall_down,30),  happens(reach_apex,30),  happens(bounce_up,20),  happens(hit_ground,20),  happens(fall_down,10),  happens(drop,10),  initiates(fall_down,falling,10),  trajectory(falling,10,height(0),20),  holdsAt(height(10),10),  not_stoppedIn(0,height(10),10),  not_stoppedIn(10,falling,20),  initiates(bounce_up,rising,20),  trajectory(rising,20,velocity(0),30),  holdsAt(velocity(10),20),  trajectory(falling,10,velocity(10),20),  holdsAt(velocity(0),10),  initiallyP(velocity(0)),  not_stoppedIn(0,velocity(0),10),  not_stoppedIn(20,rising,30),  initiates(fall_down,falling,30),  trajectory(falling,30,height(0),40),  holdsAt(height(10),30),  trajectory(rising,20,height(10),30),  holdsAt(height(0),20),  not_stoppedIn(30,falling,40),  initiates(bounce_up,rising,40),  trajectory(rising,40,velocity(0),50),  holdsAt(velocity(10),40),  trajectory(falling,30,velocity(10),40),  holdsAt(velocity(0),30),  not_stoppedIn(40,rising,50),  initiates(fall_down,falling,50),  trajectory(falling,50,height(0),60),  holdsAt(height(10),50),  trajectory(rising,40,height(10),50),  holdsAt(height(0),40),  not_stoppedIn(50,falling,60) }
BINDINGS: 
T = 60


	ANSWER:	4 (in 3434.361 ms)

JUSTIFICATION_TREE:
happens(hit_ground,80) :-
    duration(10) :-
        initiallyP(height(10)),
        initiallyP(constant_fall_rate(1)).
    holdsAt(height(0),80,falling,10) :-
        max_time(100),
        can_trajectory(falling,70,height(0),80),
        can_initiates(fall_down,falling,70),
        happens(fall_down,70) :-
            happens(reach_apex,70) :-
                duration(10) :-
                    initiallyP(height(10)),
                    initiallyP(constant_fall_rate(1)).
                holdsAt(velocity(0),70,rising,10) :-
                    max_time(100),
                    can_trajectory(rising,60,velocity(0),70),
                    can_initiates(bounce_up,rising,60),
                    happens(bounce_up,60) :-
                        happens(hit_ground,60) :-
                            duration(10) :-
                                initiallyP(height(10)),
                                initiallyP(constant_fall_rate(1)).
                            holdsAt(height(0),60,falling,10) :-
                                max_time(100),
                                can_trajectory(falling,50,height(0),60),
                                can_initiates(fall_down,falling,50),
                                happens(fall_down,50) :-
                                    happens(reach_apex,50) :-
                                        duration(10) :-
                                            initiallyP(height(10)),
                                            initiallyP(constant_fall_rate(1)).
                                        holdsAt(velocity(0),50,rising,10) :-
                                            max_time(100),
                                            can_trajectory(rising,40,velocity(0),50),
                                            can_initiates(bounce_up,rising,40),
                                            happens(bounce_up,40) :-
                                                happens(hit_ground,40) :-
                                                    duration(10) :-
                                                        initiallyP(height(10)),
                                                        initiallyP(constant_fall_rate(1)).
                                                    holdsAt(height(0),40,falling,10) :-
                                                        max_time(100),
                                                        can_trajectory(falling,30,height(0),40),
                                                        can_initiates(fall_down,falling,30),
                                                        happens(fall_down,30) :-
                                                            happens(reach_apex,30) :-
                                                                duration(10) :-
                                                                    initiallyP(height(10)),
                                                                    initiallyP(constant_fall_rate(1)).
                                                                holdsAt(velocity(0),30,rising,10) :-
                                                                    max_time(100),
                                                                    can_trajectory(rising,20,velocity(0),30),
                                                                    can_initiates(bounce_up,rising,20),
                                                                    happens(bounce_up,20) :-
                                                                        happens(hit_ground,20) :-
                                                                            duration(10) :-
                                                                                initiallyP(height(10)),
                                                                                initiallyP(constant_fall_rate(1)).
                                                                            holdsAt(height(0),20,falling,10) :-
                                                                                max_time(100),
                                                                                can_trajectory(falling,10,height(0),20),
                                                                                can_initiates(fall_down,falling,10),
                                                                                happens(fall_down,10) :-
                                                                                    happens(drop,10).
                                                                                initiates(fall_down,falling,10),
                                                                                trajectory(falling,10,height(0),20) :-
                                                                                    initiallyP(constant_fall_rate(1)),
                                                                                    holdsAt(height(10),10) :-
                                                                                        max_time(100),
                                                                                        proved(initiallyP(height(10))),
                                                                                        not_stoppedIn(0,height(10),10) :-
                                                                                            not_interrupted(terminates,height(10),0,10) :-
                                                                                                findall(Var19,findall_can_interrupts(terminates,Var19,height(10),0,10),[catch]) :-
                                                                                                    findall_can_interrupts(terminates,catch,height(10),0,10) :-
                                                                                                        can_interrupts(terminates,catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}) :-
                                                                                                            can_terminates(catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}).
                                                                                                not_interrupted_(terminates,height(10),[catch],0,10) :-
                                                                                                    findall(Var20,interrupted(terminates,catch,height(10),Var20,0,10),[]),
                                                                                                    all_entirely_outside_of_interval([],0,10),
                                                                                                    not_interrupted_(terminates,height(10),[],0,10).
                                                                                            not_interrupted(releases,height(10),0,10) :-
                                                                                                findall(Var21,findall_can_interrupts(releases,Var21,height(10),0,10),[drop]) :-
                                                                                                    findall_can_interrupts(releases,drop,height(10),0,10) :-
                                                                                                        can_interrupts(releases,drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}) :-
                                                                                                            can_releases(drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}).
                                                                                                not_interrupted_(releases,height(10),[drop],0,10) :-
                                                                                                    findall(Var22,interrupted(releases,drop,height(10),Var22,0,10),[]),
                                                                                                    proved(all_entirely_outside_of_interval([],0,10)),
                                                                                                    not_interrupted_(releases,height(10),[],0,10).
                                                                                not_stoppedIn(10,falling,20) :-
                                                                                    not_interrupted(terminates,falling,10,20) :-
                                                                                        findall(Var23,findall_can_interrupts(terminates,Var23,falling,10,20),[hit_ground,catch]) :-
                                                                                            findall_can_interrupts(terminates,hit_ground,falling,10,20) :-
                                                                                                can_interrupts(terminates,hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}) :-
                                                                                                    can_terminates(hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}).
                                                                                            findall_can_interrupts(terminates,catch,falling,10,20) :-
                                                                                                can_interrupts(terminates,catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}) :-
                                                                                                    can_terminates(catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}).
                                                                                        not_interrupted_(terminates,falling,[hit_ground,catch],10,20) :-
                                                                                            findall(Var24,interrupted(terminates,hit_ground,falling,Var24,10,20),[]),
                                                                                            all_entirely_outside_of_interval([],10,20),
                                                                                            not_interrupted_(terminates,falling,[catch],10,20) :-
                                                                                                findall(Var25,interrupted(terminates,catch,falling,Var25,10,20),[]),
                                                                                                proved(all_entirely_outside_of_interval([],10,20)),
                                                                                                not_interrupted_(terminates,falling,[],10,20).
                                                                                    not_interrupted(releases,falling,10,20) :-
                                                                                        findall(Var26,findall_can_interrupts(releases,Var26,falling,10,20),[]),
                                                                                        not_interrupted_(releases,falling,[],10,20).
                                                                    initiates(bounce_up,rising,20),
                                                                    trajectory(rising,20,velocity(0),30) :-
                                                                        initiallyP(constant_fall_rate(1)),
                                                                        holdsAt(velocity(10),20) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,10,velocity(10),20),
                                                                            can_initiates(fall_down,falling,10),
                                                                            happens(fall_down,10) :-
                                                                                happens(drop,10).
                                                                            proved(initiates(fall_down,falling,10)),
                                                                            trajectory(falling,10,velocity(10),20) :-
                                                                                initiallyP(constant_fall_rate(1)),
                                                                                holdsAt(velocity(0),10) :-
                                                                                    max_time(100),
                                                                                    initiallyP(velocity(0)),
                                                                                    not_stoppedIn(0,velocity(0),10) :-
                                                                                        not_interrupted(terminates,velocity(0),0,10) :-
                                                                                            findall(Var27,findall_can_interrupts(terminates,Var27,velocity(0),0,10),[catch]) :-
                                                                                                findall_can_interrupts(terminates,catch,velocity(0),0,10) :-
                                                                                                    can_interrupts(terminates,catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}) :-
                                                                                                        can_terminates(catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}).
                                                                                            not_interrupted_(terminates,velocity(0),[catch],0,10) :-
                                                                                                findall(Var28,interrupted(terminates,catch,velocity(0),Var28,0,10),[]),
                                                                                                proved(all_entirely_outside_of_interval([],0,10)),
                                                                                                not_interrupted_(terminates,velocity(0),[],0,10).
                                                                                        not_interrupted(releases,velocity(0),0,10) :-
                                                                                            findall(Var29,findall_can_interrupts(releases,Var29,velocity(0),0,10),[drop]) :-
                                                                                                findall_can_interrupts(releases,drop,velocity(0),0,10) :-
                                                                                                    can_interrupts(releases,drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}) :-
                                                                                                        can_releases(drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}).
                                                                                            not_interrupted_(releases,velocity(0),[drop],0,10) :-
                                                                                                findall(Var30,interrupted(releases,drop,velocity(0),Var30,0,10),[]),
                                                                                                proved(all_entirely_outside_of_interval([],0,10)),
                                                                                                not_interrupted_(releases,velocity(0),[],0,10).
                                                                            proved(not_stoppedIn(10,falling,20)).
                                                                    not_stoppedIn(20,rising,30) :-
                                                                        not_interrupted(terminates,rising,20,30) :-
                                                                            findall(Var31,findall_can_interrupts(terminates,Var31,rising,20,30),[reach_apex,catch]) :-
                                                                                findall_can_interrupts(terminates,reach_apex,rising,20,30) :-
                                                                                    can_interrupts(terminates,reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}) :-
                                                                                        can_terminates(reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}).
                                                                                findall_can_interrupts(terminates,catch,rising,20,30) :-
                                                                                    can_interrupts(terminates,catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}) :-
                                                                                        can_terminates(catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}).
                                                                            not_interrupted_(terminates,rising,[reach_apex,catch],20,30) :-
                                                                                findall(Var32,interrupted(terminates,reach_apex,rising,Var32,20,30),[]),
                                                                                all_entirely_outside_of_interval([],20,30),
                                                                                not_interrupted_(terminates,rising,[catch],20,30) :-
                                                                                    findall(Var33,interrupted(terminates,catch,rising,Var33,20,30),[]),
                                                                                    proved(all_entirely_outside_of_interval([],20,30)),
                                                                                    not_interrupted_(terminates,rising,[],20,30).
                                                                        not_interrupted(releases,rising,20,30) :-
                                                                            findall(Var34,findall_can_interrupts(releases,Var34,rising,20,30),[]),
                                                                            not_interrupted_(releases,rising,[],20,30).
                                                        initiates(fall_down,falling,30),
                                                        trajectory(falling,30,height(0),40) :-
                                                            initiallyP(constant_fall_rate(1)),
                                                            holdsAt(height(10),30) :-
                                                                max_time(100),
                                                                can_trajectory(rising,20,height(10),30),
                                                                can_initiates(bounce_up,rising,20),
                                                                happens(bounce_up,20) :-
                                                                    happens(hit_ground,20) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),20,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,10,height(0),20),
                                                                            can_initiates(fall_down,falling,10),
                                                                            happens(fall_down,10) :-
                                                                                happens(drop,10).
                                                                            proved(initiates(fall_down,falling,10)),
                                                                            proved(trajectory(falling,10,height(0),20)),
                                                                            proved(not_stoppedIn(10,falling,20)).
                                                                proved(initiates(bounce_up,rising,20)),
                                                                trajectory(rising,20,height(10),30) :-
                                                                    initiallyP(constant_fall_rate(1)),
                                                                    holdsAt(height(0),20) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,10,height(0),20),
                                                                        can_initiates(fall_down,falling,10),
                                                                        happens(fall_down,10) :-
                                                                            happens(drop,10).
                                                                        proved(initiates(fall_down,falling,10)),
                                                                        proved(trajectory(falling,10,height(0),20)),
                                                                        proved(not_stoppedIn(10,falling,20)).
                                                                proved(not_stoppedIn(20,rising,30)).
                                                        not_stoppedIn(30,falling,40) :-
                                                            not_interrupted(terminates,falling,30,40) :-
                                                                findall(Var35,findall_can_interrupts(terminates,Var35,falling,30,40),[hit_ground,catch]) :-
                                                                    findall_can_interrupts(terminates,hit_ground,falling,30,40) :-
                                                                        can_interrupts(terminates,hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}) :-
                                                                            can_terminates(hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}).
                                                                    findall_can_interrupts(terminates,catch,falling,30,40) :-
                                                                        can_interrupts(terminates,catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}) :-
                                                                            can_terminates(catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}).
                                                                not_interrupted_(terminates,falling,[hit_ground,catch],30,40) :-
                                                                    findall(Var36,interrupted(terminates,hit_ground,falling,Var36,30,40),[]),
                                                                    all_entirely_outside_of_interval([],30,40),
                                                                    not_interrupted_(terminates,falling,[catch],30,40) :-
                                                                        findall(Var37,interrupted(terminates,catch,falling,Var37,30,40),[]),
                                                                        proved(all_entirely_outside_of_interval([],30,40)),
                                                                        not_interrupted_(terminates,falling,[],30,40).
                                                            not_interrupted(releases,falling,30,40) :-
                                                                findall(Var38,findall_can_interrupts(releases,Var38,falling,30,40),[]),
                                                                not_interrupted_(releases,falling,[],30,40).
                                            initiates(bounce_up,rising,40),
                                            trajectory(rising,40,velocity(0),50) :-
                                                initiallyP(constant_fall_rate(1)),
                                                holdsAt(velocity(10),40) :-
                                                    max_time(100),
                                                    can_trajectory(falling,30,velocity(10),40),
                                                    can_initiates(fall_down,falling,30),
                                                    happens(fall_down,30) :-
                                                        happens(reach_apex,30) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),30,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,20,velocity(0),30),
                                                                can_initiates(bounce_up,rising,20),
                                                                happens(bounce_up,20) :-
                                                                    happens(hit_ground,20) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),20,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,10,height(0),20),
                                                                            can_initiates(fall_down,falling,10),
                                                                            happens(fall_down,10) :-
                                                                                happens(drop,10).
                                                                            proved(initiates(fall_down,falling,10)),
                                                                            proved(trajectory(falling,10,height(0),20)),
                                                                            proved(not_stoppedIn(10,falling,20)).
                                                                proved(initiates(bounce_up,rising,20)),
                                                                proved(trajectory(rising,20,velocity(0),30)),
                                                                proved(not_stoppedIn(20,rising,30)).
                                                    proved(initiates(fall_down,falling,30)),
                                                    trajectory(falling,30,velocity(10),40) :-
                                                        initiallyP(constant_fall_rate(1)),
                                                        holdsAt(velocity(0),30) :-
                                                            max_time(100),
                                                            can_trajectory(rising,20,velocity(0),30),
                                                            can_initiates(bounce_up,rising,20),
                                                            happens(bounce_up,20) :-
                                                                happens(hit_ground,20) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),20,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,10,height(0),20),
                                                                        can_initiates(fall_down,falling,10),
                                                                        happens(fall_down,10) :-
                                                                            happens(drop,10).
                                                                        proved(initiates(fall_down,falling,10)),
                                                                        proved(trajectory(falling,10,height(0),20)),
                                                                        proved(not_stoppedIn(10,falling,20)).
                                                            proved(initiates(bounce_up,rising,20)),
                                                            proved(trajectory(rising,20,velocity(0),30)),
                                                            proved(not_stoppedIn(20,rising,30)).
                                                    proved(not_stoppedIn(30,falling,40)).
                                            not_stoppedIn(40,rising,50) :-
                                                not_interrupted(terminates,rising,40,50) :-
                                                    findall(Var39,findall_can_interrupts(terminates,Var39,rising,40,50),[reach_apex,catch]) :-
                                                        findall_can_interrupts(terminates,reach_apex,rising,40,50) :-
                                                            can_interrupts(terminates,reach_apex,rising,Var11 | {Var11 #> 40,Var11 #< 50}) :-
                                                                can_terminates(reach_apex,rising,Var11 | {Var11 #> 40,Var11 #< 50}).
                                                        findall_can_interrupts(terminates,catch,rising,40,50) :-
                                                            can_interrupts(terminates,catch,rising,Var12 | {Var12 #> 40,Var12 #< 50}) :-
                                                                can_terminates(catch,rising,Var12 | {Var12 #> 40,Var12 #< 50}).
                                                    not_interrupted_(terminates,rising,[reach_apex,catch],40,50) :-
                                                        findall(Var40,interrupted(terminates,reach_apex,rising,Var40,40,50),[]),
                                                        all_entirely_outside_of_interval([],40,50),
                                                        not_interrupted_(terminates,rising,[catch],40,50) :-
                                                            findall(Var41,interrupted(terminates,catch,rising,Var41,40,50),[]),
                                                            proved(all_entirely_outside_of_interval([],40,50)),
                                                            not_interrupted_(terminates,rising,[],40,50).
                                                not_interrupted(releases,rising,40,50) :-
                                                    findall(Var42,findall_can_interrupts(releases,Var42,rising,40,50),[]),
                                                    not_interrupted_(releases,rising,[],40,50).
                                initiates(fall_down,falling,50),
                                trajectory(falling,50,height(0),60) :-
                                    initiallyP(constant_fall_rate(1)),
                                    holdsAt(height(10),50) :-
                                        max_time(100),
                                        can_trajectory(rising,40,height(10),50),
                                        can_initiates(bounce_up,rising,40),
                                        happens(bounce_up,40) :-
                                            happens(hit_ground,40) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),40,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,30,height(0),40),
                                                    can_initiates(fall_down,falling,30),
                                                    happens(fall_down,30) :-
                                                        happens(reach_apex,30) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),30,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,20,velocity(0),30),
                                                                can_initiates(bounce_up,rising,20),
                                                                happens(bounce_up,20) :-
                                                                    happens(hit_ground,20) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),20,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,10,height(0),20),
                                                                            can_initiates(fall_down,falling,10),
                                                                            happens(fall_down,10) :-
                                                                                happens(drop,10).
                                                                            proved(initiates(fall_down,falling,10)),
                                                                            proved(trajectory(falling,10,height(0),20)),
                                                                            proved(not_stoppedIn(10,falling,20)).
                                                                proved(initiates(bounce_up,rising,20)),
                                                                proved(trajectory(rising,20,velocity(0),30)),
                                                                proved(not_stoppedIn(20,rising,30)).
                                                    proved(initiates(fall_down,falling,30)),
                                                    proved(trajectory(falling,30,height(0),40)),
                                                    proved(not_stoppedIn(30,falling,40)).
                                        proved(initiates(bounce_up,rising,40)),
                                        trajectory(rising,40,height(10),50) :-
                                            initiallyP(constant_fall_rate(1)),
                                            holdsAt(height(0),40) :-
                                                max_time(100),
                                                can_trajectory(falling,30,height(0),40),
                                                can_initiates(fall_down,falling,30),
                                                happens(fall_down,30) :-
                                                    happens(reach_apex,30) :-
                                                        duration(10) :-
                                                            initiallyP(height(10)),
                                                            initiallyP(constant_fall_rate(1)).
                                                        holdsAt(velocity(0),30,rising,10) :-
                                                            max_time(100),
                                                            can_trajectory(rising,20,velocity(0),30),
                                                            can_initiates(bounce_up,rising,20),
                                                            happens(bounce_up,20) :-
                                                                happens(hit_ground,20) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),20,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,10,height(0),20),
                                                                        can_initiates(fall_down,falling,10),
                                                                        happens(fall_down,10) :-
                                                                            happens(drop,10).
                                                                        proved(initiates(fall_down,falling,10)),
                                                                        proved(trajectory(falling,10,height(0),20)),
                                                                        proved(not_stoppedIn(10,falling,20)).
                                                            proved(initiates(bounce_up,rising,20)),
                                                            proved(trajectory(rising,20,velocity(0),30)),
                                                            proved(not_stoppedIn(20,rising,30)).
                                                proved(initiates(fall_down,falling,30)),
                                                proved(trajectory(falling,30,height(0),40)),
                                                proved(not_stoppedIn(30,falling,40)).
                                        proved(not_stoppedIn(40,rising,50)).
                                not_stoppedIn(50,falling,60) :-
                                    not_interrupted(terminates,falling,50,60) :-
                                        findall(Var43,findall_can_interrupts(terminates,Var43,falling,50,60),[hit_ground,catch]) :-
                                            findall_can_interrupts(terminates,hit_ground,falling,50,60) :-
                                                can_interrupts(terminates,hit_ground,falling,Var13 | {Var13 #> 50,Var13 #< 60}) :-
                                                    can_terminates(hit_ground,falling,Var13 | {Var13 #> 50,Var13 #< 60}).
                                            findall_can_interrupts(terminates,catch,falling,50,60) :-
                                                can_interrupts(terminates,catch,falling,Var14 | {Var14 #> 50,Var14 #< 60}) :-
                                                    can_terminates(catch,falling,Var14 | {Var14 #> 50,Var14 #< 60}).
                                        not_interrupted_(terminates,falling,[hit_ground,catch],50,60) :-
                                            findall(Var44,interrupted(terminates,hit_ground,falling,Var44,50,60),[]),
                                            all_entirely_outside_of_interval([],50,60),
                                            not_interrupted_(terminates,falling,[catch],50,60) :-
                                                findall(Var45,interrupted(terminates,catch,falling,Var45,50,60),[]),
                                                proved(all_entirely_outside_of_interval([],50,60)),
                                                not_interrupted_(terminates,falling,[],50,60).
                                    not_interrupted(releases,falling,50,60) :-
                                        findall(Var46,findall_can_interrupts(releases,Var46,falling,50,60),[]),
                                        not_interrupted_(releases,falling,[],50,60).
                    initiates(bounce_up,rising,60),
                    trajectory(rising,60,velocity(0),70) :-
                        initiallyP(constant_fall_rate(1)),
                        holdsAt(velocity(10),60) :-
                            max_time(100),
                            can_trajectory(falling,50,velocity(10),60),
                            can_initiates(fall_down,falling,50),
                            happens(fall_down,50) :-
                                happens(reach_apex,50) :-
                                    duration(10) :-
                                        initiallyP(height(10)),
                                        initiallyP(constant_fall_rate(1)).
                                    holdsAt(velocity(0),50,rising,10) :-
                                        max_time(100),
                                        can_trajectory(rising,40,velocity(0),50),
                                        can_initiates(bounce_up,rising,40),
                                        happens(bounce_up,40) :-
                                            happens(hit_ground,40) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),40,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,30,height(0),40),
                                                    can_initiates(fall_down,falling,30),
                                                    happens(fall_down,30) :-
                                                        happens(reach_apex,30) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),30,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,20,velocity(0),30),
                                                                can_initiates(bounce_up,rising,20),
                                                                happens(bounce_up,20) :-
                                                                    happens(hit_ground,20) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),20,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,10,height(0),20),
                                                                            can_initiates(fall_down,falling,10),
                                                                            happens(fall_down,10) :-
                                                                                happens(drop,10).
                                                                            proved(initiates(fall_down,falling,10)),
                                                                            proved(trajectory(falling,10,height(0),20)),
                                                                            proved(not_stoppedIn(10,falling,20)).
                                                                proved(initiates(bounce_up,rising,20)),
                                                                proved(trajectory(rising,20,velocity(0),30)),
                                                                proved(not_stoppedIn(20,rising,30)).
                                                    proved(initiates(fall_down,falling,30)),
                                                    proved(trajectory(falling,30,height(0),40)),
                                                    proved(not_stoppedIn(30,falling,40)).
                                        proved(initiates(bounce_up,rising,40)),
                                        proved(trajectory(rising,40,velocity(0),50)),
                                        proved(not_stoppedIn(40,rising,50)).
                            proved(initiates(fall_down,falling,50)),
                            trajectory(falling,50,velocity(10),60) :-
                                initiallyP(constant_fall_rate(1)),
                                holdsAt(velocity(0),50) :-
                                    max_time(100),
                                    can_trajectory(rising,40,velocity(0),50),
                                    can_initiates(bounce_up,rising,40),
                                    happens(bounce_up,40) :-
                                        happens(hit_ground,40) :-
                                            duration(10) :-
                                                initiallyP(height(10)),
                                                initiallyP(constant_fall_rate(1)).
                                            holdsAt(height(0),40,falling,10) :-
                                                max_time(100),
                                                can_trajectory(falling,30,height(0),40),
                                                can_initiates(fall_down,falling,30),
                                                happens(fall_down,30) :-
                                                    happens(reach_apex,30) :-
                                                        duration(10) :-
                                                            initiallyP(height(10)),
                                                            initiallyP(constant_fall_rate(1)).
                                                        holdsAt(velocity(0),30,rising,10) :-
                                                            max_time(100),
                                                            can_trajectory(rising,20,velocity(0),30),
                                                            can_initiates(bounce_up,rising,20),
                                                            happens(bounce_up,20) :-
                                                                happens(hit_ground,20) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),20,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,10,height(0),20),
                                                                        can_initiates(fall_down,falling,10),
                                                                        happens(fall_down,10) :-
                                                                            happens(drop,10).
                                                                        proved(initiates(fall_down,falling,10)),
                                                                        proved(trajectory(falling,10,height(0),20)),
                                                                        proved(not_stoppedIn(10,falling,20)).
                                                            proved(initiates(bounce_up,rising,20)),
                                                            proved(trajectory(rising,20,velocity(0),30)),
                                                            proved(not_stoppedIn(20,rising,30)).
                                                proved(initiates(fall_down,falling,30)),
                                                proved(trajectory(falling,30,height(0),40)),
                                                proved(not_stoppedIn(30,falling,40)).
                                    proved(initiates(bounce_up,rising,40)),
                                    proved(trajectory(rising,40,velocity(0),50)),
                                    proved(not_stoppedIn(40,rising,50)).
                            proved(not_stoppedIn(50,falling,60)).
                    not_stoppedIn(60,rising,70) :-
                        not_interrupted(terminates,rising,60,70) :-
                            findall(Var47,findall_can_interrupts(terminates,Var47,rising,60,70),[reach_apex,catch]) :-
                                findall_can_interrupts(terminates,reach_apex,rising,60,70) :-
                                    can_interrupts(terminates,reach_apex,rising,Var15 | {Var15 #> 60,Var15 #< 70}) :-
                                        can_terminates(reach_apex,rising,Var15 | {Var15 #> 60,Var15 #< 70}).
                                findall_can_interrupts(terminates,catch,rising,60,70) :-
                                    can_interrupts(terminates,catch,rising,Var16 | {Var16 #> 60,Var16 #< 70}) :-
                                        can_terminates(catch,rising,Var16 | {Var16 #> 60,Var16 #< 70}).
                            not_interrupted_(terminates,rising,[reach_apex,catch],60,70) :-
                                findall(Var48,interrupted(terminates,reach_apex,rising,Var48,60,70),[]),
                                all_entirely_outside_of_interval([],60,70),
                                not_interrupted_(terminates,rising,[catch],60,70) :-
                                    findall(Var49,interrupted(terminates,catch,rising,Var49,60,70),[]),
                                    proved(all_entirely_outside_of_interval([],60,70)),
                                    not_interrupted_(terminates,rising,[],60,70).
                        not_interrupted(releases,rising,60,70) :-
                            findall(Var50,findall_can_interrupts(releases,Var50,rising,60,70),[]),
                            not_interrupted_(releases,rising,[],60,70).
        initiates(fall_down,falling,70),
        trajectory(falling,70,height(0),80) :-
            initiallyP(constant_fall_rate(1)),
            holdsAt(height(10),70) :-
                max_time(100),
                can_trajectory(rising,60,height(10),70),
                can_initiates(bounce_up,rising,60),
                happens(bounce_up,60) :-
                    happens(hit_ground,60) :-
                        duration(10) :-
                            initiallyP(height(10)),
                            initiallyP(constant_fall_rate(1)).
                        holdsAt(height(0),60,falling,10) :-
                            max_time(100),
                            can_trajectory(falling,50,height(0),60),
                            can_initiates(fall_down,falling,50),
                            happens(fall_down,50) :-
                                happens(reach_apex,50) :-
                                    duration(10) :-
                                        initiallyP(height(10)),
                                        initiallyP(constant_fall_rate(1)).
                                    holdsAt(velocity(0),50,rising,10) :-
                                        max_time(100),
                                        can_trajectory(rising,40,velocity(0),50),
                                        can_initiates(bounce_up,rising,40),
                                        happens(bounce_up,40) :-
                                            happens(hit_ground,40) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),40,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,30,height(0),40),
                                                    can_initiates(fall_down,falling,30),
                                                    happens(fall_down,30) :-
                                                        happens(reach_apex,30) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),30,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,20,velocity(0),30),
                                                                can_initiates(bounce_up,rising,20),
                                                                happens(bounce_up,20) :-
                                                                    happens(hit_ground,20) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),20,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,10,height(0),20),
                                                                            can_initiates(fall_down,falling,10),
                                                                            happens(fall_down,10) :-
                                                                                happens(drop,10).
                                                                            proved(initiates(fall_down,falling,10)),
                                                                            proved(trajectory(falling,10,height(0),20)),
                                                                            proved(not_stoppedIn(10,falling,20)).
                                                                proved(initiates(bounce_up,rising,20)),
                                                                proved(trajectory(rising,20,velocity(0),30)),
                                                                proved(not_stoppedIn(20,rising,30)).
                                                    proved(initiates(fall_down,falling,30)),
                                                    proved(trajectory(falling,30,height(0),40)),
                                                    proved(not_stoppedIn(30,falling,40)).
                                        proved(initiates(bounce_up,rising,40)),
                                        proved(trajectory(rising,40,velocity(0),50)),
                                        proved(not_stoppedIn(40,rising,50)).
                            proved(initiates(fall_down,falling,50)),
                            proved(trajectory(falling,50,height(0),60)),
                            proved(not_stoppedIn(50,falling,60)).
                proved(initiates(bounce_up,rising,60)),
                trajectory(rising,60,height(10),70) :-
                    initiallyP(constant_fall_rate(1)),
                    holdsAt(height(0),60) :-
                        max_time(100),
                        can_trajectory(falling,50,height(0),60),
                        can_initiates(fall_down,falling,50),
                        happens(fall_down,50) :-
                            happens(reach_apex,50) :-
                                duration(10) :-
                                    initiallyP(height(10)),
                                    initiallyP(constant_fall_rate(1)).
                                holdsAt(velocity(0),50,rising,10) :-
                                    max_time(100),
                                    can_trajectory(rising,40,velocity(0),50),
                                    can_initiates(bounce_up,rising,40),
                                    happens(bounce_up,40) :-
                                        happens(hit_ground,40) :-
                                            duration(10) :-
                                                initiallyP(height(10)),
                                                initiallyP(constant_fall_rate(1)).
                                            holdsAt(height(0),40,falling,10) :-
                                                max_time(100),
                                                can_trajectory(falling,30,height(0),40),
                                                can_initiates(fall_down,falling,30),
                                                happens(fall_down,30) :-
                                                    happens(reach_apex,30) :-
                                                        duration(10) :-
                                                            initiallyP(height(10)),
                                                            initiallyP(constant_fall_rate(1)).
                                                        holdsAt(velocity(0),30,rising,10) :-
                                                            max_time(100),
                                                            can_trajectory(rising,20,velocity(0),30),
                                                            can_initiates(bounce_up,rising,20),
                                                            happens(bounce_up,20) :-
                                                                happens(hit_ground,20) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),20,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,10,height(0),20),
                                                                        can_initiates(fall_down,falling,10),
                                                                        happens(fall_down,10) :-
                                                                            happens(drop,10).
                                                                        proved(initiates(fall_down,falling,10)),
                                                                        proved(trajectory(falling,10,height(0),20)),
                                                                        proved(not_stoppedIn(10,falling,20)).
                                                            proved(initiates(bounce_up,rising,20)),
                                                            proved(trajectory(rising,20,velocity(0),30)),
                                                            proved(not_stoppedIn(20,rising,30)).
                                                proved(initiates(fall_down,falling,30)),
                                                proved(trajectory(falling,30,height(0),40)),
                                                proved(not_stoppedIn(30,falling,40)).
                                    proved(initiates(bounce_up,rising,40)),
                                    proved(trajectory(rising,40,velocity(0),50)),
                                    proved(not_stoppedIn(40,rising,50)).
                        proved(initiates(fall_down,falling,50)),
                        proved(trajectory(falling,50,height(0),60)),
                        proved(not_stoppedIn(50,falling,60)).
                proved(not_stoppedIn(60,rising,70)).
        not_stoppedIn(70,falling,80) :-
            not_interrupted(terminates,falling,70,80) :-
                findall(Var51,findall_can_interrupts(terminates,Var51,falling,70,80),[hit_ground,catch]) :-
                    findall_can_interrupts(terminates,hit_ground,falling,70,80) :-
                        can_interrupts(terminates,hit_ground,falling,Var17 | {Var17 #> 70,Var17 #< 80}) :-
                            can_terminates(hit_ground,falling,Var17 | {Var17 #> 70,Var17 #< 80}).
                    findall_can_interrupts(terminates,catch,falling,70,80) :-
                        can_interrupts(terminates,catch,falling,Var18 | {Var18 #> 70,Var18 #< 80}) :-
                            can_terminates(catch,falling,Var18 | {Var18 #> 70,Var18 #< 80}).
                not_interrupted_(terminates,falling,[hit_ground,catch],70,80) :-
                    findall(Var52,interrupted(terminates,hit_ground,falling,Var52,70,80),[]),
                    all_entirely_outside_of_interval([],70,80),
                    not_interrupted_(terminates,falling,[catch],70,80) :-
                        findall(Var53,interrupted(terminates,catch,falling,Var53,70,80),[]),
                        proved(all_entirely_outside_of_interval([],70,80)),
                        not_interrupted_(terminates,falling,[],70,80).
            not_interrupted(releases,falling,70,80) :-
                findall(Var54,findall_can_interrupts(releases,Var54,falling,70,80),[]),
                not_interrupted_(releases,falling,[],70,80).
global_constraint.

MODEL:
{ happens(hit_ground,80),  initiallyP(height(10)),  initiallyP(constant_fall_rate(1)),  happens(fall_down,70),  happens(reach_apex,70),  happens(bounce_up,60),  happens(hit_ground,60),  happens(fall_down,50),  happens(reach_apex,50),  happens(bounce_up,40),  happens(hit_ground,40),  happens(fall_down,30),  happens(reach_apex,30),  happens(bounce_up,20),  happens(hit_ground,20),  happens(fall_down,10),  happens(drop,10),  initiates(fall_down,falling,10),  trajectory(falling,10,height(0),20),  holdsAt(height(10),10),  not_stoppedIn(0,height(10),10),  not_stoppedIn(10,falling,20),  initiates(bounce_up,rising,20),  trajectory(rising,20,velocity(0),30),  holdsAt(velocity(10),20),  trajectory(falling,10,velocity(10),20),  holdsAt(velocity(0),10),  initiallyP(velocity(0)),  not_stoppedIn(0,velocity(0),10),  not_stoppedIn(20,rising,30),  initiates(fall_down,falling,30),  trajectory(falling,30,height(0),40),  holdsAt(height(10),30),  trajectory(rising,20,height(10),30),  holdsAt(height(0),20),  not_stoppedIn(30,falling,40),  initiates(bounce_up,rising,40),  trajectory(rising,40,velocity(0),50),  holdsAt(velocity(10),40),  trajectory(falling,30,velocity(10),40),  holdsAt(velocity(0),30),  not_stoppedIn(40,rising,50),  initiates(fall_down,falling,50),  trajectory(falling,50,height(0),60),  holdsAt(height(10),50),  trajectory(rising,40,height(10),50),  holdsAt(height(0),40),  not_stoppedIn(50,falling,60),  initiates(bounce_up,rising,60),  trajectory(rising,60,velocity(0),70),  holdsAt(velocity(10),60),  trajectory(falling,50,velocity(10),60),  holdsAt(velocity(0),50),  not_stoppedIn(60,rising,70),  initiates(fall_down,falling,70),  trajectory(falling,70,height(0),80),  holdsAt(height(10),70),  trajectory(rising,60,height(10),70),  holdsAt(height(0),60),  not_stoppedIn(70,falling,80) }
BINDINGS: 
T = 80


	ANSWER:	5 (in 19661.368 ms)

JUSTIFICATION_TREE:
happens(hit_ground,100) :-
    duration(10) :-
        initiallyP(height(10)),
        initiallyP(constant_fall_rate(1)).
    holdsAt(height(0),100,falling,10) :-
        max_time(100),
        can_trajectory(falling,90,height(0),100),
        can_initiates(fall_down,falling,90),
        happens(fall_down,90) :-
            happens(reach_apex,90) :-
                duration(10) :-
                    initiallyP(height(10)),
                    initiallyP(constant_fall_rate(1)).
                holdsAt(velocity(0),90,rising,10) :-
                    max_time(100),
                    can_trajectory(rising,80,velocity(0),90),
                    can_initiates(bounce_up,rising,80),
                    happens(bounce_up,80) :-
                        happens(hit_ground,80) :-
                            duration(10) :-
                                initiallyP(height(10)),
                                initiallyP(constant_fall_rate(1)).
                            holdsAt(height(0),80,falling,10) :-
                                max_time(100),
                                can_trajectory(falling,70,height(0),80),
                                can_initiates(fall_down,falling,70),
                                happens(fall_down,70) :-
                                    happens(reach_apex,70) :-
                                        duration(10) :-
                                            initiallyP(height(10)),
                                            initiallyP(constant_fall_rate(1)).
                                        holdsAt(velocity(0),70,rising,10) :-
                                            max_time(100),
                                            can_trajectory(rising,60,velocity(0),70),
                                            can_initiates(bounce_up,rising,60),
                                            happens(bounce_up,60) :-
                                                happens(hit_ground,60) :-
                                                    duration(10) :-
                                                        initiallyP(height(10)),
                                                        initiallyP(constant_fall_rate(1)).
                                                    holdsAt(height(0),60,falling,10) :-
                                                        max_time(100),
                                                        can_trajectory(falling,50,height(0),60),
                                                        can_initiates(fall_down,falling,50),
                                                        happens(fall_down,50) :-
                                                            happens(reach_apex,50) :-
                                                                duration(10) :-
                                                                    initiallyP(height(10)),
                                                                    initiallyP(constant_fall_rate(1)).
                                                                holdsAt(velocity(0),50,rising,10) :-
                                                                    max_time(100),
                                                                    can_trajectory(rising,40,velocity(0),50),
                                                                    can_initiates(bounce_up,rising,40),
                                                                    happens(bounce_up,40) :-
                                                                        happens(hit_ground,40) :-
                                                                            duration(10) :-
                                                                                initiallyP(height(10)),
                                                                                initiallyP(constant_fall_rate(1)).
                                                                            holdsAt(height(0),40,falling,10) :-
                                                                                max_time(100),
                                                                                can_trajectory(falling,30,height(0),40),
                                                                                can_initiates(fall_down,falling,30),
                                                                                happens(fall_down,30) :-
                                                                                    happens(reach_apex,30) :-
                                                                                        duration(10) :-
                                                                                            initiallyP(height(10)),
                                                                                            initiallyP(constant_fall_rate(1)).
                                                                                        holdsAt(velocity(0),30,rising,10) :-
                                                                                            max_time(100),
                                                                                            can_trajectory(rising,20,velocity(0),30),
                                                                                            can_initiates(bounce_up,rising,20),
                                                                                            happens(bounce_up,20) :-
                                                                                                happens(hit_ground,20) :-
                                                                                                    duration(10) :-
                                                                                                        initiallyP(height(10)),
                                                                                                        initiallyP(constant_fall_rate(1)).
                                                                                                    holdsAt(height(0),20,falling,10) :-
                                                                                                        max_time(100),
                                                                                                        can_trajectory(falling,10,height(0),20),
                                                                                                        can_initiates(fall_down,falling,10),
                                                                                                        happens(fall_down,10) :-
                                                                                                            happens(drop,10).
                                                                                                        initiates(fall_down,falling,10),
                                                                                                        trajectory(falling,10,height(0),20) :-
                                                                                                            initiallyP(constant_fall_rate(1)),
                                                                                                            holdsAt(height(10),10) :-
                                                                                                                max_time(100),
                                                                                                                proved(initiallyP(height(10))),
                                                                                                                not_stoppedIn(0,height(10),10) :-
                                                                                                                    not_interrupted(terminates,height(10),0,10) :-
                                                                                                                        findall(Var23,findall_can_interrupts(terminates,Var23,height(10),0,10),[catch]) :-
                                                                                                                            findall_can_interrupts(terminates,catch,height(10),0,10) :-
                                                                                                                                can_interrupts(terminates,catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}) :-
                                                                                                                                    can_terminates(catch,height(10),Var1 | {Var1 #> 0,Var1 #< 10}).
                                                                                                                        not_interrupted_(terminates,height(10),[catch],0,10) :-
                                                                                                                            findall(Var24,interrupted(terminates,catch,height(10),Var24,0,10),[]),
                                                                                                                            all_entirely_outside_of_interval([],0,10),
                                                                                                                            not_interrupted_(terminates,height(10),[],0,10).
                                                                                                                    not_interrupted(releases,height(10),0,10) :-
                                                                                                                        findall(Var25,findall_can_interrupts(releases,Var25,height(10),0,10),[drop]) :-
                                                                                                                            findall_can_interrupts(releases,drop,height(10),0,10) :-
                                                                                                                                can_interrupts(releases,drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}) :-
                                                                                                                                    can_releases(drop,height(10),Var2 | {Var2 #> 0,Var2 #< 10}).
                                                                                                                        not_interrupted_(releases,height(10),[drop],0,10) :-
                                                                                                                            findall(Var26,interrupted(releases,drop,height(10),Var26,0,10),[]),
                                                                                                                            proved(all_entirely_outside_of_interval([],0,10)),
                                                                                                                            not_interrupted_(releases,height(10),[],0,10).
                                                                                                        not_stoppedIn(10,falling,20) :-
                                                                                                            not_interrupted(terminates,falling,10,20) :-
                                                                                                                findall(Var27,findall_can_interrupts(terminates,Var27,falling,10,20),[hit_ground,catch]) :-
                                                                                                                    findall_can_interrupts(terminates,hit_ground,falling,10,20) :-
                                                                                                                        can_interrupts(terminates,hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}) :-
                                                                                                                            can_terminates(hit_ground,falling,Var3 | {Var3 #> 10,Var3 #< 20}).
                                                                                                                    findall_can_interrupts(terminates,catch,falling,10,20) :-
                                                                                                                        can_interrupts(terminates,catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}) :-
                                                                                                                            can_terminates(catch,falling,Var4 | {Var4 #> 10,Var4 #< 20}).
                                                                                                                not_interrupted_(terminates,falling,[hit_ground,catch],10,20) :-
                                                                                                                    findall(Var28,interrupted(terminates,hit_ground,falling,Var28,10,20),[]),
                                                                                                                    all_entirely_outside_of_interval([],10,20),
                                                                                                                    not_interrupted_(terminates,falling,[catch],10,20) :-
                                                                                                                        findall(Var29,interrupted(terminates,catch,falling,Var29,10,20),[]),
                                                                                                                        proved(all_entirely_outside_of_interval([],10,20)),
                                                                                                                        not_interrupted_(terminates,falling,[],10,20).
                                                                                                            not_interrupted(releases,falling,10,20) :-
                                                                                                                findall(Var30,findall_can_interrupts(releases,Var30,falling,10,20),[]),
                                                                                                                not_interrupted_(releases,falling,[],10,20).
                                                                                            initiates(bounce_up,rising,20),
                                                                                            trajectory(rising,20,velocity(0),30) :-
                                                                                                initiallyP(constant_fall_rate(1)),
                                                                                                holdsAt(velocity(10),20) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,velocity(10),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    trajectory(falling,10,velocity(10),20) :-
                                                                                                        initiallyP(constant_fall_rate(1)),
                                                                                                        holdsAt(velocity(0),10) :-
                                                                                                            max_time(100),
                                                                                                            initiallyP(velocity(0)),
                                                                                                            not_stoppedIn(0,velocity(0),10) :-
                                                                                                                not_interrupted(terminates,velocity(0),0,10) :-
                                                                                                                    findall(Var31,findall_can_interrupts(terminates,Var31,velocity(0),0,10),[catch]) :-
                                                                                                                        findall_can_interrupts(terminates,catch,velocity(0),0,10) :-
                                                                                                                            can_interrupts(terminates,catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}) :-
                                                                                                                                can_terminates(catch,velocity(0),Var5 | {Var5 #> 0,Var5 #< 10}).
                                                                                                                    not_interrupted_(terminates,velocity(0),[catch],0,10) :-
                                                                                                                        findall(Var32,interrupted(terminates,catch,velocity(0),Var32,0,10),[]),
                                                                                                                        proved(all_entirely_outside_of_interval([],0,10)),
                                                                                                                        not_interrupted_(terminates,velocity(0),[],0,10).
                                                                                                                not_interrupted(releases,velocity(0),0,10) :-
                                                                                                                    findall(Var33,findall_can_interrupts(releases,Var33,velocity(0),0,10),[drop]) :-
                                                                                                                        findall_can_interrupts(releases,drop,velocity(0),0,10) :-
                                                                                                                            can_interrupts(releases,drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}) :-
                                                                                                                                can_releases(drop,velocity(0),Var6 | {Var6 #> 0,Var6 #< 10}).
                                                                                                                    not_interrupted_(releases,velocity(0),[drop],0,10) :-
                                                                                                                        findall(Var34,interrupted(releases,drop,velocity(0),Var34,0,10),[]),
                                                                                                                        proved(all_entirely_outside_of_interval([],0,10)),
                                                                                                                        not_interrupted_(releases,velocity(0),[],0,10).
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                            not_stoppedIn(20,rising,30) :-
                                                                                                not_interrupted(terminates,rising,20,30) :-
                                                                                                    findall(Var35,findall_can_interrupts(terminates,Var35,rising,20,30),[reach_apex,catch]) :-
                                                                                                        findall_can_interrupts(terminates,reach_apex,rising,20,30) :-
                                                                                                            can_interrupts(terminates,reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}) :-
                                                                                                                can_terminates(reach_apex,rising,Var7 | {Var7 #> 20,Var7 #< 30}).
                                                                                                        findall_can_interrupts(terminates,catch,rising,20,30) :-
                                                                                                            can_interrupts(terminates,catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}) :-
                                                                                                                can_terminates(catch,rising,Var8 | {Var8 #> 20,Var8 #< 30}).
                                                                                                    not_interrupted_(terminates,rising,[reach_apex,catch],20,30) :-
                                                                                                        findall(Var36,interrupted(terminates,reach_apex,rising,Var36,20,30),[]),
                                                                                                        all_entirely_outside_of_interval([],20,30),
                                                                                                        not_interrupted_(terminates,rising,[catch],20,30) :-
                                                                                                            findall(Var37,interrupted(terminates,catch,rising,Var37,20,30),[]),
                                                                                                            proved(all_entirely_outside_of_interval([],20,30)),
                                                                                                            not_interrupted_(terminates,rising,[],20,30).
                                                                                                not_interrupted(releases,rising,20,30) :-
                                                                                                    findall(Var38,findall_can_interrupts(releases,Var38,rising,20,30),[]),
                                                                                                    not_interrupted_(releases,rising,[],20,30).
                                                                                initiates(fall_down,falling,30),
                                                                                trajectory(falling,30,height(0),40) :-
                                                                                    initiallyP(constant_fall_rate(1)),
                                                                                    holdsAt(height(10),30) :-
                                                                                        max_time(100),
                                                                                        can_trajectory(rising,20,height(10),30),
                                                                                        can_initiates(bounce_up,rising,20),
                                                                                        happens(bounce_up,20) :-
                                                                                            happens(hit_ground,20) :-
                                                                                                duration(10) :-
                                                                                                    initiallyP(height(10)),
                                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                                holdsAt(height(0),20,falling,10) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,height(0),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    proved(trajectory(falling,10,height(0),20)),
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(initiates(bounce_up,rising,20)),
                                                                                        trajectory(rising,20,height(10),30) :-
                                                                                            initiallyP(constant_fall_rate(1)),
                                                                                            holdsAt(height(0),20) :-
                                                                                                max_time(100),
                                                                                                can_trajectory(falling,10,height(0),20),
                                                                                                can_initiates(fall_down,falling,10),
                                                                                                happens(fall_down,10) :-
                                                                                                    happens(drop,10).
                                                                                                proved(initiates(fall_down,falling,10)),
                                                                                                proved(trajectory(falling,10,height(0),20)),
                                                                                                proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(not_stoppedIn(20,rising,30)).
                                                                                not_stoppedIn(30,falling,40) :-
                                                                                    not_interrupted(terminates,falling,30,40) :-
                                                                                        findall(Var39,findall_can_interrupts(terminates,Var39,falling,30,40),[hit_ground,catch]) :-
                                                                                            findall_can_interrupts(terminates,hit_ground,falling,30,40) :-
                                                                                                can_interrupts(terminates,hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}) :-
                                                                                                    can_terminates(hit_ground,falling,Var9 | {Var9 #> 30,Var9 #< 40}).
                                                                                            findall_can_interrupts(terminates,catch,falling,30,40) :-
                                                                                                can_interrupts(terminates,catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}) :-
                                                                                                    can_terminates(catch,falling,Var10 | {Var10 #> 30,Var10 #< 40}).
                                                                                        not_interrupted_(terminates,falling,[hit_ground,catch],30,40) :-
                                                                                            findall(Var40,interrupted(terminates,hit_ground,falling,Var40,30,40),[]),
                                                                                            all_entirely_outside_of_interval([],30,40),
                                                                                            not_interrupted_(terminates,falling,[catch],30,40) :-
                                                                                                findall(Var41,interrupted(terminates,catch,falling,Var41,30,40),[]),
                                                                                                proved(all_entirely_outside_of_interval([],30,40)),
                                                                                                not_interrupted_(terminates,falling,[],30,40).
                                                                                    not_interrupted(releases,falling,30,40) :-
                                                                                        findall(Var42,findall_can_interrupts(releases,Var42,falling,30,40),[]),
                                                                                        not_interrupted_(releases,falling,[],30,40).
                                                                    initiates(bounce_up,rising,40),
                                                                    trajectory(rising,40,velocity(0),50) :-
                                                                        initiallyP(constant_fall_rate(1)),
                                                                        holdsAt(velocity(10),40) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,30,velocity(10),40),
                                                                            can_initiates(fall_down,falling,30),
                                                                            happens(fall_down,30) :-
                                                                                happens(reach_apex,30) :-
                                                                                    duration(10) :-
                                                                                        initiallyP(height(10)),
                                                                                        initiallyP(constant_fall_rate(1)).
                                                                                    holdsAt(velocity(0),30,rising,10) :-
                                                                                        max_time(100),
                                                                                        can_trajectory(rising,20,velocity(0),30),
                                                                                        can_initiates(bounce_up,rising,20),
                                                                                        happens(bounce_up,20) :-
                                                                                            happens(hit_ground,20) :-
                                                                                                duration(10) :-
                                                                                                    initiallyP(height(10)),
                                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                                holdsAt(height(0),20,falling,10) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,height(0),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    proved(trajectory(falling,10,height(0),20)),
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(initiates(bounce_up,rising,20)),
                                                                                        proved(trajectory(rising,20,velocity(0),30)),
                                                                                        proved(not_stoppedIn(20,rising,30)).
                                                                            proved(initiates(fall_down,falling,30)),
                                                                            trajectory(falling,30,velocity(10),40) :-
                                                                                initiallyP(constant_fall_rate(1)),
                                                                                holdsAt(velocity(0),30) :-
                                                                                    max_time(100),
                                                                                    can_trajectory(rising,20,velocity(0),30),
                                                                                    can_initiates(bounce_up,rising,20),
                                                                                    happens(bounce_up,20) :-
                                                                                        happens(hit_ground,20) :-
                                                                                            duration(10) :-
                                                                                                initiallyP(height(10)),
                                                                                                initiallyP(constant_fall_rate(1)).
                                                                                            holdsAt(height(0),20,falling,10) :-
                                                                                                max_time(100),
                                                                                                can_trajectory(falling,10,height(0),20),
                                                                                                can_initiates(fall_down,falling,10),
                                                                                                happens(fall_down,10) :-
                                                                                                    happens(drop,10).
                                                                                                proved(initiates(fall_down,falling,10)),
                                                                                                proved(trajectory(falling,10,height(0),20)),
                                                                                                proved(not_stoppedIn(10,falling,20)).
                                                                                    proved(initiates(bounce_up,rising,20)),
                                                                                    proved(trajectory(rising,20,velocity(0),30)),
                                                                                    proved(not_stoppedIn(20,rising,30)).
                                                                            proved(not_stoppedIn(30,falling,40)).
                                                                    not_stoppedIn(40,rising,50) :-
                                                                        not_interrupted(terminates,rising,40,50) :-
                                                                            findall(Var43,findall_can_interrupts(terminates,Var43,rising,40,50),[reach_apex,catch]) :-
                                                                                findall_can_interrupts(terminates,reach_apex,rising,40,50) :-
                                                                                    can_interrupts(terminates,reach_apex,rising,Var11 | {Var11 #> 40,Var11 #< 50}) :-
                                                                                        can_terminates(reach_apex,rising,Var11 | {Var11 #> 40,Var11 #< 50}).
                                                                                findall_can_interrupts(terminates,catch,rising,40,50) :-
                                                                                    can_interrupts(terminates,catch,rising,Var12 | {Var12 #> 40,Var12 #< 50}) :-
                                                                                        can_terminates(catch,rising,Var12 | {Var12 #> 40,Var12 #< 50}).
                                                                            not_interrupted_(terminates,rising,[reach_apex,catch],40,50) :-
                                                                                findall(Var44,interrupted(terminates,reach_apex,rising,Var44,40,50),[]),
                                                                                all_entirely_outside_of_interval([],40,50),
                                                                                not_interrupted_(terminates,rising,[catch],40,50) :-
                                                                                    findall(Var45,interrupted(terminates,catch,rising,Var45,40,50),[]),
                                                                                    proved(all_entirely_outside_of_interval([],40,50)),
                                                                                    not_interrupted_(terminates,rising,[],40,50).
                                                                        not_interrupted(releases,rising,40,50) :-
                                                                            findall(Var46,findall_can_interrupts(releases,Var46,rising,40,50),[]),
                                                                            not_interrupted_(releases,rising,[],40,50).
                                                        initiates(fall_down,falling,50),
                                                        trajectory(falling,50,height(0),60) :-
                                                            initiallyP(constant_fall_rate(1)),
                                                            holdsAt(height(10),50) :-
                                                                max_time(100),
                                                                can_trajectory(rising,40,height(10),50),
                                                                can_initiates(bounce_up,rising,40),
                                                                happens(bounce_up,40) :-
                                                                    happens(hit_ground,40) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),40,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,30,height(0),40),
                                                                            can_initiates(fall_down,falling,30),
                                                                            happens(fall_down,30) :-
                                                                                happens(reach_apex,30) :-
                                                                                    duration(10) :-
                                                                                        initiallyP(height(10)),
                                                                                        initiallyP(constant_fall_rate(1)).
                                                                                    holdsAt(velocity(0),30,rising,10) :-
                                                                                        max_time(100),
                                                                                        can_trajectory(rising,20,velocity(0),30),
                                                                                        can_initiates(bounce_up,rising,20),
                                                                                        happens(bounce_up,20) :-
                                                                                            happens(hit_ground,20) :-
                                                                                                duration(10) :-
                                                                                                    initiallyP(height(10)),
                                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                                holdsAt(height(0),20,falling,10) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,height(0),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    proved(trajectory(falling,10,height(0),20)),
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(initiates(bounce_up,rising,20)),
                                                                                        proved(trajectory(rising,20,velocity(0),30)),
                                                                                        proved(not_stoppedIn(20,rising,30)).
                                                                            proved(initiates(fall_down,falling,30)),
                                                                            proved(trajectory(falling,30,height(0),40)),
                                                                            proved(not_stoppedIn(30,falling,40)).
                                                                proved(initiates(bounce_up,rising,40)),
                                                                trajectory(rising,40,height(10),50) :-
                                                                    initiallyP(constant_fall_rate(1)),
                                                                    holdsAt(height(0),40) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,30,height(0),40),
                                                                        can_initiates(fall_down,falling,30),
                                                                        happens(fall_down,30) :-
                                                                            happens(reach_apex,30) :-
                                                                                duration(10) :-
                                                                                    initiallyP(height(10)),
                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                holdsAt(velocity(0),30,rising,10) :-
                                                                                    max_time(100),
                                                                                    can_trajectory(rising,20,velocity(0),30),
                                                                                    can_initiates(bounce_up,rising,20),
                                                                                    happens(bounce_up,20) :-
                                                                                        happens(hit_ground,20) :-
                                                                                            duration(10) :-
                                                                                                initiallyP(height(10)),
                                                                                                initiallyP(constant_fall_rate(1)).
                                                                                            holdsAt(height(0),20,falling,10) :-
                                                                                                max_time(100),
                                                                                                can_trajectory(falling,10,height(0),20),
                                                                                                can_initiates(fall_down,falling,10),
                                                                                                happens(fall_down,10) :-
                                                                                                    happens(drop,10).
                                                                                                proved(initiates(fall_down,falling,10)),
                                                                                                proved(trajectory(falling,10,height(0),20)),
                                                                                                proved(not_stoppedIn(10,falling,20)).
                                                                                    proved(initiates(bounce_up,rising,20)),
                                                                                    proved(trajectory(rising,20,velocity(0),30)),
                                                                                    proved(not_stoppedIn(20,rising,30)).
                                                                        proved(initiates(fall_down,falling,30)),
                                                                        proved(trajectory(falling,30,height(0),40)),
                                                                        proved(not_stoppedIn(30,falling,40)).
                                                                proved(not_stoppedIn(40,rising,50)).
                                                        not_stoppedIn(50,falling,60) :-
                                                            not_interrupted(terminates,falling,50,60) :-
                                                                findall(Var47,findall_can_interrupts(terminates,Var47,falling,50,60),[hit_ground,catch]) :-
                                                                    findall_can_interrupts(terminates,hit_ground,falling,50,60) :-
                                                                        can_interrupts(terminates,hit_ground,falling,Var13 | {Var13 #> 50,Var13 #< 60}) :-
                                                                            can_terminates(hit_ground,falling,Var13 | {Var13 #> 50,Var13 #< 60}).
                                                                    findall_can_interrupts(terminates,catch,falling,50,60) :-
                                                                        can_interrupts(terminates,catch,falling,Var14 | {Var14 #> 50,Var14 #< 60}) :-
                                                                            can_terminates(catch,falling,Var14 | {Var14 #> 50,Var14 #< 60}).
                                                                not_interrupted_(terminates,falling,[hit_ground,catch],50,60) :-
                                                                    findall(Var48,interrupted(terminates,hit_ground,falling,Var48,50,60),[]),
                                                                    all_entirely_outside_of_interval([],50,60),
                                                                    not_interrupted_(terminates,falling,[catch],50,60) :-
                                                                        findall(Var49,interrupted(terminates,catch,falling,Var49,50,60),[]),
                                                                        proved(all_entirely_outside_of_interval([],50,60)),
                                                                        not_interrupted_(terminates,falling,[],50,60).
                                                            not_interrupted(releases,falling,50,60) :-
                                                                findall(Var50,findall_can_interrupts(releases,Var50,falling,50,60),[]),
                                                                not_interrupted_(releases,falling,[],50,60).
                                            initiates(bounce_up,rising,60),
                                            trajectory(rising,60,velocity(0),70) :-
                                                initiallyP(constant_fall_rate(1)),
                                                holdsAt(velocity(10),60) :-
                                                    max_time(100),
                                                    can_trajectory(falling,50,velocity(10),60),
                                                    can_initiates(fall_down,falling,50),
                                                    happens(fall_down,50) :-
                                                        happens(reach_apex,50) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),50,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,40,velocity(0),50),
                                                                can_initiates(bounce_up,rising,40),
                                                                happens(bounce_up,40) :-
                                                                    happens(hit_ground,40) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),40,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,30,height(0),40),
                                                                            can_initiates(fall_down,falling,30),
                                                                            happens(fall_down,30) :-
                                                                                happens(reach_apex,30) :-
                                                                                    duration(10) :-
                                                                                        initiallyP(height(10)),
                                                                                        initiallyP(constant_fall_rate(1)).
                                                                                    holdsAt(velocity(0),30,rising,10) :-
                                                                                        max_time(100),
                                                                                        can_trajectory(rising,20,velocity(0),30),
                                                                                        can_initiates(bounce_up,rising,20),
                                                                                        happens(bounce_up,20) :-
                                                                                            happens(hit_ground,20) :-
                                                                                                duration(10) :-
                                                                                                    initiallyP(height(10)),
                                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                                holdsAt(height(0),20,falling,10) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,height(0),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    proved(trajectory(falling,10,height(0),20)),
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(initiates(bounce_up,rising,20)),
                                                                                        proved(trajectory(rising,20,velocity(0),30)),
                                                                                        proved(not_stoppedIn(20,rising,30)).
                                                                            proved(initiates(fall_down,falling,30)),
                                                                            proved(trajectory(falling,30,height(0),40)),
                                                                            proved(not_stoppedIn(30,falling,40)).
                                                                proved(initiates(bounce_up,rising,40)),
                                                                proved(trajectory(rising,40,velocity(0),50)),
                                                                proved(not_stoppedIn(40,rising,50)).
                                                    proved(initiates(fall_down,falling,50)),
                                                    trajectory(falling,50,velocity(10),60) :-
                                                        initiallyP(constant_fall_rate(1)),
                                                        holdsAt(velocity(0),50) :-
                                                            max_time(100),
                                                            can_trajectory(rising,40,velocity(0),50),
                                                            can_initiates(bounce_up,rising,40),
                                                            happens(bounce_up,40) :-
                                                                happens(hit_ground,40) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),40,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,30,height(0),40),
                                                                        can_initiates(fall_down,falling,30),
                                                                        happens(fall_down,30) :-
                                                                            happens(reach_apex,30) :-
                                                                                duration(10) :-
                                                                                    initiallyP(height(10)),
                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                holdsAt(velocity(0),30,rising,10) :-
                                                                                    max_time(100),
                                                                                    can_trajectory(rising,20,velocity(0),30),
                                                                                    can_initiates(bounce_up,rising,20),
                                                                                    happens(bounce_up,20) :-
                                                                                        happens(hit_ground,20) :-
                                                                                            duration(10) :-
                                                                                                initiallyP(height(10)),
                                                                                                initiallyP(constant_fall_rate(1)).
                                                                                            holdsAt(height(0),20,falling,10) :-
                                                                                                max_time(100),
                                                                                                can_trajectory(falling,10,height(0),20),
                                                                                                can_initiates(fall_down,falling,10),
                                                                                                happens(fall_down,10) :-
                                                                                                    happens(drop,10).
                                                                                                proved(initiates(fall_down,falling,10)),
                                                                                                proved(trajectory(falling,10,height(0),20)),
                                                                                                proved(not_stoppedIn(10,falling,20)).
                                                                                    proved(initiates(bounce_up,rising,20)),
                                                                                    proved(trajectory(rising,20,velocity(0),30)),
                                                                                    proved(not_stoppedIn(20,rising,30)).
                                                                        proved(initiates(fall_down,falling,30)),
                                                                        proved(trajectory(falling,30,height(0),40)),
                                                                        proved(not_stoppedIn(30,falling,40)).
                                                            proved(initiates(bounce_up,rising,40)),
                                                            proved(trajectory(rising,40,velocity(0),50)),
                                                            proved(not_stoppedIn(40,rising,50)).
                                                    proved(not_stoppedIn(50,falling,60)).
                                            not_stoppedIn(60,rising,70) :-
                                                not_interrupted(terminates,rising,60,70) :-
                                                    findall(Var51,findall_can_interrupts(terminates,Var51,rising,60,70),[reach_apex,catch]) :-
                                                        findall_can_interrupts(terminates,reach_apex,rising,60,70) :-
                                                            can_interrupts(terminates,reach_apex,rising,Var15 | {Var15 #> 60,Var15 #< 70}) :-
                                                                can_terminates(reach_apex,rising,Var15 | {Var15 #> 60,Var15 #< 70}).
                                                        findall_can_interrupts(terminates,catch,rising,60,70) :-
                                                            can_interrupts(terminates,catch,rising,Var16 | {Var16 #> 60,Var16 #< 70}) :-
                                                                can_terminates(catch,rising,Var16 | {Var16 #> 60,Var16 #< 70}).
                                                    not_interrupted_(terminates,rising,[reach_apex,catch],60,70) :-
                                                        findall(Var52,interrupted(terminates,reach_apex,rising,Var52,60,70),[]),
                                                        all_entirely_outside_of_interval([],60,70),
                                                        not_interrupted_(terminates,rising,[catch],60,70) :-
                                                            findall(Var53,interrupted(terminates,catch,rising,Var53,60,70),[]),
                                                            proved(all_entirely_outside_of_interval([],60,70)),
                                                            not_interrupted_(terminates,rising,[],60,70).
                                                not_interrupted(releases,rising,60,70) :-
                                                    findall(Var54,findall_can_interrupts(releases,Var54,rising,60,70),[]),
                                                    not_interrupted_(releases,rising,[],60,70).
                                initiates(fall_down,falling,70),
                                trajectory(falling,70,height(0),80) :-
                                    initiallyP(constant_fall_rate(1)),
                                    holdsAt(height(10),70) :-
                                        max_time(100),
                                        can_trajectory(rising,60,height(10),70),
                                        can_initiates(bounce_up,rising,60),
                                        happens(bounce_up,60) :-
                                            happens(hit_ground,60) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),60,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,50,height(0),60),
                                                    can_initiates(fall_down,falling,50),
                                                    happens(fall_down,50) :-
                                                        happens(reach_apex,50) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),50,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,40,velocity(0),50),
                                                                can_initiates(bounce_up,rising,40),
                                                                happens(bounce_up,40) :-
                                                                    happens(hit_ground,40) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),40,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,30,height(0),40),
                                                                            can_initiates(fall_down,falling,30),
                                                                            happens(fall_down,30) :-
                                                                                happens(reach_apex,30) :-
                                                                                    duration(10) :-
                                                                                        initiallyP(height(10)),
                                                                                        initiallyP(constant_fall_rate(1)).
                                                                                    holdsAt(velocity(0),30,rising,10) :-
                                                                                        max_time(100),
                                                                                        can_trajectory(rising,20,velocity(0),30),
                                                                                        can_initiates(bounce_up,rising,20),
                                                                                        happens(bounce_up,20) :-
                                                                                            happens(hit_ground,20) :-
                                                                                                duration(10) :-
                                                                                                    initiallyP(height(10)),
                                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                                holdsAt(height(0),20,falling,10) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,height(0),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    proved(trajectory(falling,10,height(0),20)),
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(initiates(bounce_up,rising,20)),
                                                                                        proved(trajectory(rising,20,velocity(0),30)),
                                                                                        proved(not_stoppedIn(20,rising,30)).
                                                                            proved(initiates(fall_down,falling,30)),
                                                                            proved(trajectory(falling,30,height(0),40)),
                                                                            proved(not_stoppedIn(30,falling,40)).
                                                                proved(initiates(bounce_up,rising,40)),
                                                                proved(trajectory(rising,40,velocity(0),50)),
                                                                proved(not_stoppedIn(40,rising,50)).
                                                    proved(initiates(fall_down,falling,50)),
                                                    proved(trajectory(falling,50,height(0),60)),
                                                    proved(not_stoppedIn(50,falling,60)).
                                        proved(initiates(bounce_up,rising,60)),
                                        trajectory(rising,60,height(10),70) :-
                                            initiallyP(constant_fall_rate(1)),
                                            holdsAt(height(0),60) :-
                                                max_time(100),
                                                can_trajectory(falling,50,height(0),60),
                                                can_initiates(fall_down,falling,50),
                                                happens(fall_down,50) :-
                                                    happens(reach_apex,50) :-
                                                        duration(10) :-
                                                            initiallyP(height(10)),
                                                            initiallyP(constant_fall_rate(1)).
                                                        holdsAt(velocity(0),50,rising,10) :-
                                                            max_time(100),
                                                            can_trajectory(rising,40,velocity(0),50),
                                                            can_initiates(bounce_up,rising,40),
                                                            happens(bounce_up,40) :-
                                                                happens(hit_ground,40) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),40,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,30,height(0),40),
                                                                        can_initiates(fall_down,falling,30),
                                                                        happens(fall_down,30) :-
                                                                            happens(reach_apex,30) :-
                                                                                duration(10) :-
                                                                                    initiallyP(height(10)),
                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                holdsAt(velocity(0),30,rising,10) :-
                                                                                    max_time(100),
                                                                                    can_trajectory(rising,20,velocity(0),30),
                                                                                    can_initiates(bounce_up,rising,20),
                                                                                    happens(bounce_up,20) :-
                                                                                        happens(hit_ground,20) :-
                                                                                            duration(10) :-
                                                                                                initiallyP(height(10)),
                                                                                                initiallyP(constant_fall_rate(1)).
                                                                                            holdsAt(height(0),20,falling,10) :-
                                                                                                max_time(100),
                                                                                                can_trajectory(falling,10,height(0),20),
                                                                                                can_initiates(fall_down,falling,10),
                                                                                                happens(fall_down,10) :-
                                                                                                    happens(drop,10).
                                                                                                proved(initiates(fall_down,falling,10)),
                                                                                                proved(trajectory(falling,10,height(0),20)),
                                                                                                proved(not_stoppedIn(10,falling,20)).
                                                                                    proved(initiates(bounce_up,rising,20)),
                                                                                    proved(trajectory(rising,20,velocity(0),30)),
                                                                                    proved(not_stoppedIn(20,rising,30)).
                                                                        proved(initiates(fall_down,falling,30)),
                                                                        proved(trajectory(falling,30,height(0),40)),
                                                                        proved(not_stoppedIn(30,falling,40)).
                                                            proved(initiates(bounce_up,rising,40)),
                                                            proved(trajectory(rising,40,velocity(0),50)),
                                                            proved(not_stoppedIn(40,rising,50)).
                                                proved(initiates(fall_down,falling,50)),
                                                proved(trajectory(falling,50,height(0),60)),
                                                proved(not_stoppedIn(50,falling,60)).
                                        proved(not_stoppedIn(60,rising,70)).
                                not_stoppedIn(70,falling,80) :-
                                    not_interrupted(terminates,falling,70,80) :-
                                        findall(Var55,findall_can_interrupts(terminates,Var55,falling,70,80),[hit_ground,catch]) :-
                                            findall_can_interrupts(terminates,hit_ground,falling,70,80) :-
                                                can_interrupts(terminates,hit_ground,falling,Var17 | {Var17 #> 70,Var17 #< 80}) :-
                                                    can_terminates(hit_ground,falling,Var17 | {Var17 #> 70,Var17 #< 80}).
                                            findall_can_interrupts(terminates,catch,falling,70,80) :-
                                                can_interrupts(terminates,catch,falling,Var18 | {Var18 #> 70,Var18 #< 80}) :-
                                                    can_terminates(catch,falling,Var18 | {Var18 #> 70,Var18 #< 80}).
                                        not_interrupted_(terminates,falling,[hit_ground,catch],70,80) :-
                                            findall(Var56,interrupted(terminates,hit_ground,falling,Var56,70,80),[]),
                                            all_entirely_outside_of_interval([],70,80),
                                            not_interrupted_(terminates,falling,[catch],70,80) :-
                                                findall(Var57,interrupted(terminates,catch,falling,Var57,70,80),[]),
                                                proved(all_entirely_outside_of_interval([],70,80)),
                                                not_interrupted_(terminates,falling,[],70,80).
                                    not_interrupted(releases,falling,70,80) :-
                                        findall(Var58,findall_can_interrupts(releases,Var58,falling,70,80),[]),
                                        not_interrupted_(releases,falling,[],70,80).
                    initiates(bounce_up,rising,80),
                    trajectory(rising,80,velocity(0),90) :-
                        initiallyP(constant_fall_rate(1)),
                        holdsAt(velocity(10),80) :-
                            max_time(100),
                            can_trajectory(falling,70,velocity(10),80),
                            can_initiates(fall_down,falling,70),
                            happens(fall_down,70) :-
                                happens(reach_apex,70) :-
                                    duration(10) :-
                                        initiallyP(height(10)),
                                        initiallyP(constant_fall_rate(1)).
                                    holdsAt(velocity(0),70,rising,10) :-
                                        max_time(100),
                                        can_trajectory(rising,60,velocity(0),70),
                                        can_initiates(bounce_up,rising,60),
                                        happens(bounce_up,60) :-
                                            happens(hit_ground,60) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),60,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,50,height(0),60),
                                                    can_initiates(fall_down,falling,50),
                                                    happens(fall_down,50) :-
                                                        happens(reach_apex,50) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),50,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,40,velocity(0),50),
                                                                can_initiates(bounce_up,rising,40),
                                                                happens(bounce_up,40) :-
                                                                    happens(hit_ground,40) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),40,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,30,height(0),40),
                                                                            can_initiates(fall_down,falling,30),
                                                                            happens(fall_down,30) :-
                                                                                happens(reach_apex,30) :-
                                                                                    duration(10) :-
                                                                                        initiallyP(height(10)),
                                                                                        initiallyP(constant_fall_rate(1)).
                                                                                    holdsAt(velocity(0),30,rising,10) :-
                                                                                        max_time(100),
                                                                                        can_trajectory(rising,20,velocity(0),30),
                                                                                        can_initiates(bounce_up,rising,20),
                                                                                        happens(bounce_up,20) :-
                                                                                            happens(hit_ground,20) :-
                                                                                                duration(10) :-
                                                                                                    initiallyP(height(10)),
                                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                                holdsAt(height(0),20,falling,10) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,height(0),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    proved(trajectory(falling,10,height(0),20)),
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(initiates(bounce_up,rising,20)),
                                                                                        proved(trajectory(rising,20,velocity(0),30)),
                                                                                        proved(not_stoppedIn(20,rising,30)).
                                                                            proved(initiates(fall_down,falling,30)),
                                                                            proved(trajectory(falling,30,height(0),40)),
                                                                            proved(not_stoppedIn(30,falling,40)).
                                                                proved(initiates(bounce_up,rising,40)),
                                                                proved(trajectory(rising,40,velocity(0),50)),
                                                                proved(not_stoppedIn(40,rising,50)).
                                                    proved(initiates(fall_down,falling,50)),
                                                    proved(trajectory(falling,50,height(0),60)),
                                                    proved(not_stoppedIn(50,falling,60)).
                                        proved(initiates(bounce_up,rising,60)),
                                        proved(trajectory(rising,60,velocity(0),70)),
                                        proved(not_stoppedIn(60,rising,70)).
                            proved(initiates(fall_down,falling,70)),
                            trajectory(falling,70,velocity(10),80) :-
                                initiallyP(constant_fall_rate(1)),
                                holdsAt(velocity(0),70) :-
                                    max_time(100),
                                    can_trajectory(rising,60,velocity(0),70),
                                    can_initiates(bounce_up,rising,60),
                                    happens(bounce_up,60) :-
                                        happens(hit_ground,60) :-
                                            duration(10) :-
                                                initiallyP(height(10)),
                                                initiallyP(constant_fall_rate(1)).
                                            holdsAt(height(0),60,falling,10) :-
                                                max_time(100),
                                                can_trajectory(falling,50,height(0),60),
                                                can_initiates(fall_down,falling,50),
                                                happens(fall_down,50) :-
                                                    happens(reach_apex,50) :-
                                                        duration(10) :-
                                                            initiallyP(height(10)),
                                                            initiallyP(constant_fall_rate(1)).
                                                        holdsAt(velocity(0),50,rising,10) :-
                                                            max_time(100),
                                                            can_trajectory(rising,40,velocity(0),50),
                                                            can_initiates(bounce_up,rising,40),
                                                            happens(bounce_up,40) :-
                                                                happens(hit_ground,40) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),40,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,30,height(0),40),
                                                                        can_initiates(fall_down,falling,30),
                                                                        happens(fall_down,30) :-
                                                                            happens(reach_apex,30) :-
                                                                                duration(10) :-
                                                                                    initiallyP(height(10)),
                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                holdsAt(velocity(0),30,rising,10) :-
                                                                                    max_time(100),
                                                                                    can_trajectory(rising,20,velocity(0),30),
                                                                                    can_initiates(bounce_up,rising,20),
                                                                                    happens(bounce_up,20) :-
                                                                                        happens(hit_ground,20) :-
                                                                                            duration(10) :-
                                                                                                initiallyP(height(10)),
                                                                                                initiallyP(constant_fall_rate(1)).
                                                                                            holdsAt(height(0),20,falling,10) :-
                                                                                                max_time(100),
                                                                                                can_trajectory(falling,10,height(0),20),
                                                                                                can_initiates(fall_down,falling,10),
                                                                                                happens(fall_down,10) :-
                                                                                                    happens(drop,10).
                                                                                                proved(initiates(fall_down,falling,10)),
                                                                                                proved(trajectory(falling,10,height(0),20)),
                                                                                                proved(not_stoppedIn(10,falling,20)).
                                                                                    proved(initiates(bounce_up,rising,20)),
                                                                                    proved(trajectory(rising,20,velocity(0),30)),
                                                                                    proved(not_stoppedIn(20,rising,30)).
                                                                        proved(initiates(fall_down,falling,30)),
                                                                        proved(trajectory(falling,30,height(0),40)),
                                                                        proved(not_stoppedIn(30,falling,40)).
                                                            proved(initiates(bounce_up,rising,40)),
                                                            proved(trajectory(rising,40,velocity(0),50)),
                                                            proved(not_stoppedIn(40,rising,50)).
                                                proved(initiates(fall_down,falling,50)),
                                                proved(trajectory(falling,50,height(0),60)),
                                                proved(not_stoppedIn(50,falling,60)).
                                    proved(initiates(bounce_up,rising,60)),
                                    proved(trajectory(rising,60,velocity(0),70)),
                                    proved(not_stoppedIn(60,rising,70)).
                            proved(not_stoppedIn(70,falling,80)).
                    not_stoppedIn(80,rising,90) :-
                        not_interrupted(terminates,rising,80,90) :-
                            findall(Var59,findall_can_interrupts(terminates,Var59,rising,80,90),[reach_apex,catch]) :-
                                findall_can_interrupts(terminates,reach_apex,rising,80,90) :-
                                    can_interrupts(terminates,reach_apex,rising,Var19 | {Var19 #> 80,Var19 #< 90}) :-
                                        can_terminates(reach_apex,rising,Var19 | {Var19 #> 80,Var19 #< 90}).
                                findall_can_interrupts(terminates,catch,rising,80,90) :-
                                    can_interrupts(terminates,catch,rising,Var20 | {Var20 #> 80,Var20 #< 90}) :-
                                        can_terminates(catch,rising,Var20 | {Var20 #> 80,Var20 #< 90}).
                            not_interrupted_(terminates,rising,[reach_apex,catch],80,90) :-
                                findall(Var60,interrupted(terminates,reach_apex,rising,Var60,80,90),[]),
                                all_entirely_outside_of_interval([],80,90),
                                not_interrupted_(terminates,rising,[catch],80,90) :-
                                    findall(Var61,interrupted(terminates,catch,rising,Var61,80,90),[]),
                                    proved(all_entirely_outside_of_interval([],80,90)),
                                    not_interrupted_(terminates,rising,[],80,90).
                        not_interrupted(releases,rising,80,90) :-
                            findall(Var62,findall_can_interrupts(releases,Var62,rising,80,90),[]),
                            not_interrupted_(releases,rising,[],80,90).
        initiates(fall_down,falling,90),
        trajectory(falling,90,height(0),100) :-
            initiallyP(constant_fall_rate(1)),
            holdsAt(height(10),90) :-
                max_time(100),
                can_trajectory(rising,80,height(10),90),
                can_initiates(bounce_up,rising,80),
                happens(bounce_up,80) :-
                    happens(hit_ground,80) :-
                        duration(10) :-
                            initiallyP(height(10)),
                            initiallyP(constant_fall_rate(1)).
                        holdsAt(height(0),80,falling,10) :-
                            max_time(100),
                            can_trajectory(falling,70,height(0),80),
                            can_initiates(fall_down,falling,70),
                            happens(fall_down,70) :-
                                happens(reach_apex,70) :-
                                    duration(10) :-
                                        initiallyP(height(10)),
                                        initiallyP(constant_fall_rate(1)).
                                    holdsAt(velocity(0),70,rising,10) :-
                                        max_time(100),
                                        can_trajectory(rising,60,velocity(0),70),
                                        can_initiates(bounce_up,rising,60),
                                        happens(bounce_up,60) :-
                                            happens(hit_ground,60) :-
                                                duration(10) :-
                                                    initiallyP(height(10)),
                                                    initiallyP(constant_fall_rate(1)).
                                                holdsAt(height(0),60,falling,10) :-
                                                    max_time(100),
                                                    can_trajectory(falling,50,height(0),60),
                                                    can_initiates(fall_down,falling,50),
                                                    happens(fall_down,50) :-
                                                        happens(reach_apex,50) :-
                                                            duration(10) :-
                                                                initiallyP(height(10)),
                                                                initiallyP(constant_fall_rate(1)).
                                                            holdsAt(velocity(0),50,rising,10) :-
                                                                max_time(100),
                                                                can_trajectory(rising,40,velocity(0),50),
                                                                can_initiates(bounce_up,rising,40),
                                                                happens(bounce_up,40) :-
                                                                    happens(hit_ground,40) :-
                                                                        duration(10) :-
                                                                            initiallyP(height(10)),
                                                                            initiallyP(constant_fall_rate(1)).
                                                                        holdsAt(height(0),40,falling,10) :-
                                                                            max_time(100),
                                                                            can_trajectory(falling,30,height(0),40),
                                                                            can_initiates(fall_down,falling,30),
                                                                            happens(fall_down,30) :-
                                                                                happens(reach_apex,30) :-
                                                                                    duration(10) :-
                                                                                        initiallyP(height(10)),
                                                                                        initiallyP(constant_fall_rate(1)).
                                                                                    holdsAt(velocity(0),30,rising,10) :-
                                                                                        max_time(100),
                                                                                        can_trajectory(rising,20,velocity(0),30),
                                                                                        can_initiates(bounce_up,rising,20),
                                                                                        happens(bounce_up,20) :-
                                                                                            happens(hit_ground,20) :-
                                                                                                duration(10) :-
                                                                                                    initiallyP(height(10)),
                                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                                holdsAt(height(0),20,falling,10) :-
                                                                                                    max_time(100),
                                                                                                    can_trajectory(falling,10,height(0),20),
                                                                                                    can_initiates(fall_down,falling,10),
                                                                                                    happens(fall_down,10) :-
                                                                                                        happens(drop,10).
                                                                                                    proved(initiates(fall_down,falling,10)),
                                                                                                    proved(trajectory(falling,10,height(0),20)),
                                                                                                    proved(not_stoppedIn(10,falling,20)).
                                                                                        proved(initiates(bounce_up,rising,20)),
                                                                                        proved(trajectory(rising,20,velocity(0),30)),
                                                                                        proved(not_stoppedIn(20,rising,30)).
                                                                            proved(initiates(fall_down,falling,30)),
                                                                            proved(trajectory(falling,30,height(0),40)),
                                                                            proved(not_stoppedIn(30,falling,40)).
                                                                proved(initiates(bounce_up,rising,40)),
                                                                proved(trajectory(rising,40,velocity(0),50)),
                                                                proved(not_stoppedIn(40,rising,50)).
                                                    proved(initiates(fall_down,falling,50)),
                                                    proved(trajectory(falling,50,height(0),60)),
                                                    proved(not_stoppedIn(50,falling,60)).
                                        proved(initiates(bounce_up,rising,60)),
                                        proved(trajectory(rising,60,velocity(0),70)),
                                        proved(not_stoppedIn(60,rising,70)).
                            proved(initiates(fall_down,falling,70)),
                            proved(trajectory(falling,70,height(0),80)),
                            proved(not_stoppedIn(70,falling,80)).
                proved(initiates(bounce_up,rising,80)),
                trajectory(rising,80,height(10),90) :-
                    initiallyP(constant_fall_rate(1)),
                    holdsAt(height(0),80) :-
                        max_time(100),
                        can_trajectory(falling,70,height(0),80),
                        can_initiates(fall_down,falling,70),
                        happens(fall_down,70) :-
                            happens(reach_apex,70) :-
                                duration(10) :-
                                    initiallyP(height(10)),
                                    initiallyP(constant_fall_rate(1)).
                                holdsAt(velocity(0),70,rising,10) :-
                                    max_time(100),
                                    can_trajectory(rising,60,velocity(0),70),
                                    can_initiates(bounce_up,rising,60),
                                    happens(bounce_up,60) :-
                                        happens(hit_ground,60) :-
                                            duration(10) :-
                                                initiallyP(height(10)),
                                                initiallyP(constant_fall_rate(1)).
                                            holdsAt(height(0),60,falling,10) :-
                                                max_time(100),
                                                can_trajectory(falling,50,height(0),60),
                                                can_initiates(fall_down,falling,50),
                                                happens(fall_down,50) :-
                                                    happens(reach_apex,50) :-
                                                        duration(10) :-
                                                            initiallyP(height(10)),
                                                            initiallyP(constant_fall_rate(1)).
                                                        holdsAt(velocity(0),50,rising,10) :-
                                                            max_time(100),
                                                            can_trajectory(rising,40,velocity(0),50),
                                                            can_initiates(bounce_up,rising,40),
                                                            happens(bounce_up,40) :-
                                                                happens(hit_ground,40) :-
                                                                    duration(10) :-
                                                                        initiallyP(height(10)),
                                                                        initiallyP(constant_fall_rate(1)).
                                                                    holdsAt(height(0),40,falling,10) :-
                                                                        max_time(100),
                                                                        can_trajectory(falling,30,height(0),40),
                                                                        can_initiates(fall_down,falling,30),
                                                                        happens(fall_down,30) :-
                                                                            happens(reach_apex,30) :-
                                                                                duration(10) :-
                                                                                    initiallyP(height(10)),
                                                                                    initiallyP(constant_fall_rate(1)).
                                                                                holdsAt(velocity(0),30,rising,10) :-
                                                                                    max_time(100),
                                                                                    can_trajectory(rising,20,velocity(0),30),
                                                                                    can_initiates(bounce_up,rising,20),
                                                                                    happens(bounce_up,20) :-
                                                                                        happens(hit_ground,20) :-
                                                                                            duration(10) :-
                                                                                                initiallyP(height(10)),
                                                                                                initiallyP(constant_fall_rate(1)).
                                                                                            holdsAt(height(0),20,falling,10) :-
                                                                                                max_time(100),
                                                                                                can_trajectory(falling,10,height(0),20),
                                                                                                can_initiates(fall_down,falling,10),
                                                                                                happens(fall_down,10) :-
                                                                                                    happens(drop,10).
                                                                                                proved(initiates(fall_down,falling,10)),
                                                                                                proved(trajectory(falling,10,height(0),20)),
                                                                                                proved(not_stoppedIn(10,falling,20)).
                                                                                    proved(initiates(bounce_up,rising,20)),
                                                                                    proved(trajectory(rising,20,velocity(0),30)),
                                                                                    proved(not_stoppedIn(20,rising,30)).
                                                                        proved(initiates(fall_down,falling,30)),
                                                                        proved(trajectory(falling,30,height(0),40)),
                                                                        proved(not_stoppedIn(30,falling,40)).
                                                            proved(initiates(bounce_up,rising,40)),
                                                            proved(trajectory(rising,40,velocity(0),50)),
                                                            proved(not_stoppedIn(40,rising,50)).
                                                proved(initiates(fall_down,falling,50)),
                                                proved(trajectory(falling,50,height(0),60)),
                                                proved(not_stoppedIn(50,falling,60)).
                                    proved(initiates(bounce_up,rising,60)),
                                    proved(trajectory(rising,60,velocity(0),70)),
                                    proved(not_stoppedIn(60,rising,70)).
                        proved(initiates(fall_down,falling,70)),
                        proved(trajectory(falling,70,height(0),80)),
                        proved(not_stoppedIn(70,falling,80)).
                proved(not_stoppedIn(80,rising,90)).
        not_stoppedIn(90,falling,100) :-
            not_interrupted(terminates,falling,90,100) :-
                findall(Var63,findall_can_interrupts(terminates,Var63,falling,90,100),[hit_ground,catch]) :-
                    findall_can_interrupts(terminates,hit_ground,falling,90,100) :-
                        can_interrupts(terminates,hit_ground,falling,Var21 | {Var21 #> 90,Var21 #< 100}) :-
                            can_terminates(hit_ground,falling,Var21 | {Var21 #> 90,Var21 #< 100}).
                    findall_can_interrupts(terminates,catch,falling,90,100) :-
                        can_interrupts(terminates,catch,falling,Var22 | {Var22 #> 90,Var22 #< 100}) :-
                            can_terminates(catch,falling,Var22 | {Var22 #> 90,Var22 #< 100}).
                not_interrupted_(terminates,falling,[hit_ground,catch],90,100) :-
                    findall(Var64,interrupted(terminates,hit_ground,falling,Var64,90,100),[]),
                    all_entirely_outside_of_interval([],90,100),
                    not_interrupted_(terminates,falling,[catch],90,100) :-
                        findall(Var65,interrupted(terminates,catch,falling,Var65,90,100),[]),
                        proved(all_entirely_outside_of_interval([],90,100)),
                        not_interrupted_(terminates,falling,[],90,100).
            not_interrupted(releases,falling,90,100) :-
                findall(Var66,findall_can_interrupts(releases,Var66,falling,90,100),[]),
                not_interrupted_(releases,falling,[],90,100).
global_constraint.

MODEL:
{ happens(hit_ground,100),  initiallyP(height(10)),  initiallyP(constant_fall_rate(1)),  happens(fall_down,90),  happens(reach_apex,90),  happens(bounce_up,80),  happens(hit_ground,80),  happens(fall_down,70),  happens(reach_apex,70),  happens(bounce_up,60),  happens(hit_ground,60),  happens(fall_down,50),  happens(reach_apex,50),  happens(bounce_up,40),  happens(hit_ground,40),  happens(fall_down,30),  happens(reach_apex,30),  happens(bounce_up,20),  happens(hit_ground,20),  happens(fall_down,10),  happens(drop,10),  initiates(fall_down,falling,10),  trajectory(falling,10,height(0),20),  holdsAt(height(10),10),  not_stoppedIn(0,height(10),10),  not_stoppedIn(10,falling,20),  initiates(bounce_up,rising,20),  trajectory(rising,20,velocity(0),30),  holdsAt(velocity(10),20),  trajectory(falling,10,velocity(10),20),  holdsAt(velocity(0),10),  initiallyP(velocity(0)),  not_stoppedIn(0,velocity(0),10),  not_stoppedIn(20,rising,30),  initiates(fall_down,falling,30),  trajectory(falling,30,height(0),40),  holdsAt(height(10),30),  trajectory(rising,20,height(10),30),  holdsAt(height(0),20),  not_stoppedIn(30,falling,40),  initiates(bounce_up,rising,40),  trajectory(rising,40,velocity(0),50),  holdsAt(velocity(10),40),  trajectory(falling,30,velocity(10),40),  holdsAt(velocity(0),30),  not_stoppedIn(40,rising,50),  initiates(fall_down,falling,50),  trajectory(falling,50,height(0),60),  holdsAt(height(10),50),  trajectory(rising,40,height(10),50),  holdsAt(height(0),40),  not_stoppedIn(50,falling,60),  initiates(bounce_up,rising,60),  trajectory(rising,60,velocity(0),70),  holdsAt(velocity(10),60),  trajectory(falling,50,velocity(10),60),  holdsAt(velocity(0),50),  not_stoppedIn(60,rising,70),  initiates(fall_down,falling,70),  trajectory(falling,70,height(0),80),  holdsAt(height(10),70),  trajectory(rising,60,height(10),70),  holdsAt(height(0),60),  not_stoppedIn(70,falling,80),  initiates(bounce_up,rising,80),  trajectory(rising,80,velocity(0),90),  holdsAt(velocity(10),80),  trajectory(falling,70,velocity(10),80),  holdsAt(velocity(0),70),  not_stoppedIn(80,rising,90),  initiates(fall_down,falling,90),  trajectory(falling,90,height(0),100),  holdsAt(height(10),90),  trajectory(rising,80,height(10),90),  holdsAt(height(0),80),  not_stoppedIn(90,falling,100) }
BINDINGS: 
T = 100


  real      0:35.75
  real [s]  35.75
  user [s]  31.98
  sys  [s]  0.15
  mem  [KB] 31132
  avgm [KB] 0

$ oscasp -s0 --ec ../axioms/bec_scasp-small.pl ./fix-remodel.pl --tree 


% QUERY:?- happens(serviceFee,T).

	ANSWER:	1 (in 8.661 ms)

JUSTIFICATION_TREE:
happens(serviceFee,20) :-
    happens(withdraw(1500),20),
    holdsAt(noServiceFeeYet,20) :-
        max_time(100),
        initiallyP(noServiceFeeYet),
        not_stoppedIn(0,noServiceFeeYet,20) :-
            findall(Var6,findall_can_terminates(Var6,noServiceFeeYet,0,20),[serviceFee]) :-
                findall_can_terminates(serviceFee,noServiceFeeYet,0,20) :-
                    can_terminates(serviceFee,noServiceFeeYet,Var1 | {Var1 #> 0,Var1 #< 20}).
            not_terminated(noServiceFeeYet,[serviceFee],0,20) :-
                findall(Var7,terminated(serviceFee,noServiceFeeYet,Var7,0,20),[]),
                all_entirely_outside_of_interval([],0,20),
                not_terminated(noServiceFeeYet,[],0,20).
    holdsAt(balance(2000),20) :-
        max_time(100),
        can_initiates(withdraw(8000),balance(2000),10),
        happens(withdraw(8000),10),
        initiates(withdraw(8000),balance(2000),10) :-
            not_happens(serviceFee,10) :-
                not_happensInInc(serviceFee,10,10) :-
                    findall(Var8,not_happensInIncFindall(serviceFee,Var8,10,10),[]),
                    outsideInc([],10,10).
            holdsAt(balance(10000),10) :-
                max_time(100),
                initiallyP(balance(10000)),
                not_stoppedIn(0,balance(10000),10) :-
                    findall(Var9,findall_can_terminates(Var9,balance(10000),0,10),[withdraw(Var2)]) :-
                        findall_can_terminates(withdraw(Var2),balance(10000),0,10) :-
                            can_terminates(withdraw(Var2),balance(10000),Var3 | {Var3 #> 0,Var3 #< 10}).
                    not_terminated(balance(10000),[withdraw(Var2)],0,10) :-
                        findall(Var10,terminated(withdraw(Var2),balance(10000),Var10,0,10),[]),
                        all_entirely_outside_of_interval([],0,10),
                        not_terminated(balance(10000),[],0,10).
        not_stoppedIn(10,balance(2000),20) :-
            findall(Var11,findall_can_terminates(Var11,balance(2000),10,20),[withdraw(Var4)]) :-
                findall_can_terminates(withdraw(Var4),balance(2000),10,20) :-
                    can_terminates(withdraw(Var4),balance(2000),Var5 | {Var5 #> 10,Var5 #< 20}).
            not_terminated(balance(2000),[withdraw(Var4)],10,20) :-
                findall(Var12,terminated(withdraw(Var4),balance(2000),Var12,10,20),[]),
                all_entirely_outside_of_interval([],10,20),
                not_terminated(balance(2000),[],10,20).
global_constraint.

MODEL:
{ happens(serviceFee,20),  happens(withdraw(1500),20),  holdsAt(noServiceFeeYet,20),  initiallyP(noServiceFeeYet),  not_stoppedIn(0,noServiceFeeYet,20),  holdsAt(balance(2000),20),  happens(withdraw(8000),10),  initiates(withdraw(8000),balance(2000),10),  not_happens(serviceFee,10),  holdsAt(balance(10000),10),  initiallyP(balance(10000)),  not_stoppedIn(0,balance(10000),10),  not_stoppedIn(10,balance(2000),20) }
BINDINGS: 
T = 20


  real      0:00.36
  real [s]  0.36
  user [s]  0.16
  sys  [s]  0.02
  mem  [KB] 26792
  avgm [KB] 0

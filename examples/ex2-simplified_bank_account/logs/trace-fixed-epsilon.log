$ oscasp -s0 ../axioms/bec_scasp-small.pl ./model-fixed-epsilon.pl --tree -r


% QUERY:?- happens(serviceFee,T).

	ANSWER:	1 (in 14.34 ms)

JUSTIFICATION_TREE:
happens(serviceFee,20.0) :-
    epsilon(0.0),
    happens(withdraw(1500),20),
    holdsAt(noServiceFeeYet,20.0) :-
        max_time(100),
        initiallyP(noServiceFeeYet),
        not_stoppedIn(0,noServiceFeeYet,20.0) :-
            findall(Var4,can_terminates(Var4,noServiceFeeYet),[serviceFee]) :-
                can_terminates(serviceFee,noServiceFeeYet).
            not_terminated(noServiceFeeYet,[serviceFee],0,20.0) :-
                findall(Var5,terminated(serviceFee,noServiceFeeYet,Var5,0,20.0),[]),
                all_entirely_outside_of_interval([],0,20.0),
                not_terminated(noServiceFeeYet,[],0,20.0).
    holdsAt(balance(500),20.0) :-
        max_time(100),
        can_initiates(withdraw(1500),balance(500)),
        happens(withdraw(1500),20),
        initiates(withdraw(1500),balance(500),20) :-
            holdsAt(balance(2000),20) :-
                max_time(100),
                can_initiates(withdraw(8000),balance(2000)),
                happens(withdraw(8000),10),
                initiates(withdraw(8000),balance(2000),10) :-
                    holdsAt(balance(10000),10) :-
                        max_time(100),
                        initiallyP(balance(10000)),
                        not_stoppedIn(0,balance(10000),10) :-
                            findall(Var6,can_terminates(Var6,balance(10000)),[serviceFee,withdraw(Var1)]) :-
                                can_terminates(serviceFee,balance(10000)),
                                can_terminates(withdraw(Var1),balance(10000)).
                            not_terminated(balance(10000),[serviceFee,withdraw(Var1)],0,10) :-
                                findall(Var7,terminated(serviceFee,balance(10000),Var7,0,10),[]),
                                all_entirely_outside_of_interval([],0,10),
                                not_terminated(balance(10000),[withdraw(Var1)],0,10) :-
                                    findall(Var8,terminated(withdraw(Var1),balance(10000),Var8,0,10),[]),
                                    proved(all_entirely_outside_of_interval([],0,10)),
                                    not_terminated(balance(10000),[],0,10).
                not_stoppedIn(10,balance(2000),20) :-
                    findall(Var9,can_terminates(Var9,balance(2000)),[serviceFee,withdraw(Var2)]) :-
                        can_terminates(serviceFee,balance(2000)),
                        can_terminates(withdraw(Var2),balance(2000)).
                    not_terminated(balance(2000),[serviceFee,withdraw(Var2)],10,20) :-
                        findall(Var10,terminated(serviceFee,balance(2000),Var10,10,20),[]),
                        all_entirely_outside_of_interval([],10,20),
                        not_terminated(balance(2000),[withdraw(Var2)],10,20) :-
                            findall(Var11,terminated(withdraw(Var2),balance(2000),Var11,10,20),[]),
                            proved(all_entirely_outside_of_interval([],10,20)),
                            not_terminated(balance(2000),[],10,20).
        not_stoppedIn(20,balance(500),20.0) :-
            findall(Var12,can_terminates(Var12,balance(500)),[serviceFee,withdraw(Var3)]) :-
                can_terminates(serviceFee,balance(500)),
                can_terminates(withdraw(Var3),balance(500)).
            not_terminated(balance(500),[serviceFee,withdraw(Var3)],20,20.0) :-
                findall(Var13,terminated(serviceFee,balance(500),Var13,20,20.0),[]),
                all_entirely_outside_of_interval([],20,20.0),
                not_terminated(balance(500),[withdraw(Var3)],20,20.0) :-
                    findall(Var14,terminated(withdraw(Var3),balance(500),Var14,20,20.0),[]),
                    proved(all_entirely_outside_of_interval([],20,20.0)),
                    not_terminated(balance(500),[],20,20.0).
global_constraint.

MODEL:
{ happens(serviceFee,20.0),  happens(withdraw(1500),20),  holdsAt(noServiceFeeYet,20.0),  holdsAt(balance(500),20.0),  initiates(withdraw(1500),balance(500),20),  holdsAt(balance(2000),20),  happens(withdraw(8000),10),  initiates(withdraw(8000),balance(2000),10),  holdsAt(balance(10000),10) }
BINDINGS: 
T = 20.0


  real      0:00.29
  real [s]  0.29
  user [s]  0.10
  sys  [s]  0.03
  mem  [KB] 26884
  avgm [KB] 0
